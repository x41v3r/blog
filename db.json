{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/c-operators.png","path":"images/c-operators.png","modified":0,"renderable":0},{"_id":"source/images/webpage-structure-sample.png","path":"images/webpage-structure-sample.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/gov.png","path":"img/gov.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":0,"renderable":1},{"_id":"source/images/c-if-flowchart.png","path":"images/c-if-flowchart.png","modified":0,"renderable":0},{"_id":"source/images/c-if_else-flowchart.png","path":"images/c-if_else-flowchart.png","modified":0,"renderable":0},{"_id":"source/images/c-if_else_if_ladder-flowchart.png","path":"images/c-if_else_if_ladder-flowchart.png","modified":0,"renderable":0},{"_id":"source/images/java-data-types.png","path":"images/java-data-types.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/images/webpage-structure-sample.png","hash":"80e86aad807fe7a57b06f81ae089feedaec4a626","modified":1736764293155},{"_id":"source/_posts/c-language.md","hash":"6875a99fd0ed5cc6d51df245e8b0176d84dcd438","modified":1739547311079},{"_id":"source/_posts/computer-system.md","hash":"21e8250fea7bbc29ea627a29756e29f6e827e98e","modified":1736764474029},{"_id":"source/_posts/cpp-language.md","hash":"10278ba047a1a16dae2eeb89fc53ffeb7f81a3a7","modified":1737034161789},{"_id":"source/_posts/frontend-css.md","hash":"7b300bdfb3de882119f7033954e649f6e1cf165d","modified":1739547311079},{"_id":"source/_posts/frontend-html.md","hash":"7a0da2d33790e379e651ade0dfdee0fa4b2e7b13","modified":1737123169694},{"_id":"source/_posts/java-api.md","hash":"0b8d56472527471e948463c0854089dde19f790f","modified":1737034161791},{"_id":"source/_posts/java-mybatis-plus.md","hash":"27c000f93e75f33be9147a3aafdf04c0681a0632","modified":1737123169694},{"_id":"source/_posts/java-language.md","hash":"9c7195a28e136968390518464bebc52e1a43c376","modified":1737123169694},{"_id":"source/_posts/mysql-about.md","hash":"f0bc9d63dcd8e48a3b857cd0a866b39c6550cacb","modified":1737034161793},{"_id":"source/_posts/mysql-crud.md","hash":"6257652e5cfffed4234e9eab67012b9ba62f836a","modified":1737123161443},{"_id":"source/images/c-operators.png","hash":"1805130650fddb330ee3e46b2e8289b57af68ea1","modified":1737126880464},{"_id":"themes/hexo-theme-3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1736764474030},{"_id":"themes/hexo-theme-3-hexo/README.md","hash":"d3b65547645e6cb494409969fe93bc824450b888","modified":1736764474031},{"_id":"themes/hexo-theme-3-hexo/layout/indexs.md","hash":"b5f63a5da22505bd4bf09d45233ca1bf85bf390c","modified":1736764474034},{"_id":"themes/hexo-theme-3-hexo/layout/index.ejs","hash":"27ea3dac053d501b79bbef5117b4f3aff063d8cd","modified":1736764474034},{"_id":"themes/hexo-theme-3-hexo/layout/post.ejs","hash":"955cfffb5605099de53eb5bd5306975122d69f33","modified":1736764474034},{"_id":"themes/hexo-theme-3-hexo/_config.yml","hash":"94d47a11106a5df13353972838f02c557dc2436d","modified":1739547311085},{"_id":"themes/hexo-theme-3-hexo/languages/zh-CN.yml","hash":"c907bf3b8ef0b89bcd3ab90836e6f834518d36ba","modified":1736764474031},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1736764474032},{"_id":"themes/hexo-theme-3-hexo/languages/en.yml","hash":"85fb1d7f8b704febedc247aeda19bc3c30bbc088","modified":1736764474031},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/copyright.ejs","hash":"f66939a8c9d5258948b47842b8b4495e6ec45988","modified":1736764474033},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/article_copyright.ejs","hash":"0ebb17d001cb7bb7606c616c380049a2e7124496","modified":1736764474032},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/dashang.ejs","hash":"bc94eee27701b67d238f328737b578e8270989eb","modified":1736764474033},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/friends.ejs","hash":"d11092791e5c140ff81f2aefa0d1b051f403239d","modified":1736764474033},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/full-toc.ejs","hash":"bf7723eac5b36dc99a3c97f5bb219ddd85cab8e4","modified":1736764474033},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1736764474034},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/article.ejs","hash":"e0ca22b2c49d5d0b0e1e64170356a523cd8a51bf","modified":1736764474031},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/meta.ejs","hash":"8a9e93f9cbe80763264018290da0b14b4bbe8ac5","modified":1736764474034},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/header.ejs","hash":"76768204853a8a5e030a96d605a247f9686cf994","modified":1736764474033},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/tag.ejs","hash":"3cf8ba0c6112dfa8089603b8df3e31f70a272715","modified":1736764474034},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/footer.ejs","hash":"82e715547344e7ba911d66b4ceacf7c011338bfc","modified":1736764474033},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/nav-left.ejs","hash":"cbad17074f7a44520b4c7dad5a515d6aaf5e1e14","modified":1736764474034},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1736764474034},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/nav-right.ejs","hash":"a14cf10e8af1f7e83d6514c0a2912e14a0b8b0bd","modified":1736764474034},{"_id":"themes/hexo-theme-3-hexo/source/css/mobile.styl","hash":"59a4abd36cc8ff2107f1fcb3c0fe48d0492c9030","modified":1736764474039},{"_id":"themes/hexo-theme-3-hexo/source/css/style.styl","hash":"7090b81f34e26172670c68da6a366ca186523779","modified":1736764474039},{"_id":"themes/hexo-theme-3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1736764474042},{"_id":"themes/hexo-theme-3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1736764474039},{"_id":"themes/hexo-theme-3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1736764474040},{"_id":"themes/hexo-theme-3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1736764474042},{"_id":"themes/hexo-theme-3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1736764474042},{"_id":"themes/hexo-theme-3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1736764474047},{"_id":"themes/hexo-theme-3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1736764474047},{"_id":"themes/hexo-theme-3-hexo/source/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1736764474047},{"_id":"themes/hexo-theme-3-hexo/source/js/script.js","hash":"e369c9098c3448fb5c144d904154b7e15ca28f67","modified":1736764474047},{"_id":"themes/hexo-theme-3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1736764474047},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1736764474032},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/giscus.ejs","hash":"941e7598a76f64fb4c5048c328a0237d05ca1abc","modified":1736764474032},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1736764474033},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1736764474032},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/livere.ejs","hash":"e820aa16b5ed4e024616b5e2d424925820d43e56","modified":1736764474033},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/utteranc.ejs","hash":"be91620693ca62e0ca72ee26e7712eeac6a320e1","modified":1736764474033},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1736764474035},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1736764474035},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/font.styl","hash":"c68d6942ed62f9cce8a9042f5a59055a0ee5441c","modified":1736764474035},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/comment.styl","hash":"2a9b5ffb759be85545a89f6d1194579a800f51a5","modified":1736764474035},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/full-toc.styl","hash":"0143711c1221cb4e70a3db866754d79c8a81d253","modified":1736764474035},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/nav-left.styl","hash":"d35df7f5e68880d1f1ebec541b816f8257fd42cb","modified":1736764474035},{"_id":"themes/hexo-theme-3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1736764474032},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/nav-right.styl","hash":"05dcaf21f281f8ce483562e66fc31bc0fe8a2171","modified":1736764474035},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1736764474035},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1736764474035},{"_id":"themes/hexo-theme-3-hexo/source/css/_partial/post.styl","hash":"0dd8d208081b92e05d6db3361743c520a2816828","modified":1736764474035},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1736764474036},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1736764474036},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1736764474036},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1736764474036},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1736764474036},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1736764474037},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1736764474037},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1736764474037},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1736764474037},{"_id":"themes/hexo-theme-3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1736764474037},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1736764474039},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1736764474038},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1736764474039},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1736764474039},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1736764474039},{"_id":"themes/hexo-theme-3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1736764474039},{"_id":"themes/hexo-theme-3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1736764474043},{"_id":"themes/hexo-theme-3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1736764474046},{"_id":"themes/hexo-theme-3-hexo/source/img/avatar.jpg","hash":"2e622dbafa2b408baa1ab32df40c46ef67af6f93","modified":1737034161800},{"_id":"themes/hexo-theme-3-hexo/source/img/avatar.png","hash":"83494e0de1f32a3eeac526f59b9595b2d34b92b1","modified":1736771029387},{"_id":"themes/hexo-theme-3-hexo/source/js/gitalk.js","hash":"26ba4841dcb4b178f730f53a8d1f4a7c89442b4f","modified":1736764474046},{"_id":"source/_posts/python-language.md","hash":"fa29db81df31289e8a398a59198e24c8e2bbfe84","modified":1739547311079},{"_id":"source/_posts/c-standard-library.md","hash":"a257603b5b40c30cdad54a9a67825aeab8256388","modified":1739547311079},{"_id":"source/_posts/c-unix-system-interface.md","hash":"4ad8466513c23a420bb7054f1c6528f72136282a","modified":1739547311079},{"_id":"source/_posts/cpp-programming-language.md","hash":"7a78ea5b69c8aae52534ea324603d2f17e4de0de","modified":1739547311080},{"_id":"source/_posts/java-jeecg.md","hash":"6ec0e08a8fdaf19858535e0797695f175411ff05","modified":1739547311080},{"_id":"source/_posts/java-programming-language.md","hash":"78252e2f61af9cbe450ae471743bd6af3570b068","modified":1739547311080},{"_id":"source/_posts/c-programming-language.md","hash":"3dc6beb8e81cbf70904f664ca5d63f0db209f61b","modified":1739547311079},{"_id":"source/images/c-if-flowchart.png","hash":"0265a1af7cbe4213dc714d8b940d382f64ba44ee","modified":1739547311080},{"_id":"source/images/java-data-types.png","hash":"9b4b2d2463f81ea9bec9002db00458561536d813","modified":1739547311080},{"_id":"source/images/c-if_else_if_ladder-flowchart.png","hash":"226b630366a63b5f87214708fba9d32551d4eee3","modified":1739547311080},{"_id":"source/images/c-if_else-flowchart.png","hash":"76dba88e21bb795719f9a1a373c47ec46b87c67f","modified":1739547311080}],"Category":[{"name":"C/Cpp","_id":"cm626nnh30002osij9t72dmud"},{"name":"EECS","_id":"cm626nnhb000bosij7dt037vz"},{"name":"Frontend","_id":"cm626nnhd000gosij92hdcux5"},{"name":"Java","_id":"cm626nnhf000kosij1fipa7lu"},{"name":"MySQL","_id":"cm626nnhg000qosijbmhyderq"},{"name":"C","_id":"cm74xk2qm0001kwijfopd1251"},{"name":"Cpp","_id":"cm74xk2r2000ckwijh6nlbkfh"},{"name":"Python","_id":"cm74xk2r4000gkwij026g88mn"}],"Data":[],"Page":[],"Post":[{"title":"C Language","date":"2024-12-22T15:08:36.000Z","_content":"\n# 1 Introduction to C\n\n&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. \n\n```c\n#include <stdio.h>  //include information about standard library\n\nmain()  //define a funcation named \"main\"\n{  //statements of \"main\" are enclosed in braces\n    printf(\"hello, world\\n\");\n}\n```\n\n> &emsp;&emsp;A C program begins executing at the beginning of **main**. This means that every C program must have a **main** somewhere.\n\n# 2 Types, operators, and expressions\n\n## 2.1 Variable names\n\nThere are some restrictions on the names of variables and symbolic constants:\n\n* Names are made up of letters and digits; the first character must be a letter. \n* The underscore `_` counts as a letter, it is sometimes useful for **improving the readability of long variable names**. (Don't begin variable names with underscore, however, since library routines often use such names. )\n* **Upper case and lower case letters are distinct**, so \"x\" and \"X\" are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)\n\n## 2.2 Data types and sizes\n\nThere are only a few basic data types in C:\n\n| type    | description                                                                          |\n|:-------:|:------------------------------------------------------------------------------------:|\n| `char`  | **A single byte**, capable of holding one character in the local character set.      |\n| `int`   | An integer, *typically reflecting the natural size of integers on the host machine*. |\n| `float` | Single-precision floating point.                                                     |\n| `double`| Double-precision floating point.                                                     |\n\n&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. \n\n`short` and `long` apply to integers:\n\n```c\nshort int sh;\nlong int counter;\n```\n\n&emsp;&emsp;The word \"int\" can be omitted in such declarations, and typically is.\n\n```c\nshort sh;\nlong counter;\n```\n\n> &emsp;&emsp;The intent is that `short` and `long` should provide different lengths of integers where practical; `int` will normally be the natural size for a particular machine.\n\nOn a 32-bit machine, `short` is often 16 bits, `long` 32 bits, and `int` either 16 or 32 bits.\n\nOn a 64-bit machine, `short` is 16 bits, `long` 64 bits, and `int` 32 bits.\n\n...\n\n> &emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that *`short`s and `int`s are at least 16 bits, `long`s are at least 32 bits, and `short` is no longer than `int`, which is no longer than `long`*.\n\n## 2.3 Constants\n\n&emsp;&emsp;An integer constant like `1234` is an `int`. A `long` constant is written with a terminal `l` or `L`, as in `123456789L`; an integer too big to fit into an `int` will also be taken as a `long`. The `unsigned int` constants are written with a terminal `u` or `U`, and the suffix `ul` or `UL` indicates `unsigned long`.\n\n```c\nint a = 1234;\nunsigned int ua = 1234u;\n\nlong b = 1234567890L;\nunsigned long ub = 1234567890UL;\n```\n\nThe value of an integer *can be specified in octal or hexadecimal instead of decimal*: A leading `0` on an integer constant means **octal**; a leading `0x` or `0X` means **hexadecimal**.  \n\n```c\nint a = 037;  // 31 in octal\nint b = 0x1F;  // 31 in hexadecimal\n\nprintf(\"a(037) = %d\\n\", a);  // a(037) = 31\nprintf(\"b(0x1F) = %d\\n\", b);  // b(0x1F) = 31\n```\n\n&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is `double`, unless suffixed. The suffixes `f` or `F` indicate a `float` constant; `l` or `L` indicate a `long double`.\n\n```c\ndouble d = 12.34;\nfloat f = 12.34f;\nlong double ld = 12.34L;\n```\n\n&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as `'x'`. The value of a character constant is the numeric value of the character in the machine's character set.\n\n```c\nchar c = 'x';\n```\n\n> &emsp;&emsp;For example, in the ASCII character set the character constant `'0'` has the value `48`, which is unrelated to the numeric value `0`. If we write `'0'` instead of a numeric value like `48` that depends on character set, *the program is independent of the particular value and easier to read*.\n\n```c\nchar c = '0';\nint ci = c;  //ci = 48 \n```\n\n## 2.4 Declarations\n\n&emsp;&emsp;*All variables must be declared before use*, although certain declarations can be made implicitly by context.\n\nA declaration specifies a type, and contains a list of one or more variables of that type, as in:\n\n```c\nint lower, upper, step;\nchar c, line[100];\n```\n\nVariables can be distributed among declarations in any fashion; the lists above could equally well be written as:\n\n```c\nint lower;\nint upper;\nint step;\nchar c;\nchar line[1000];\n```\n\n> &emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.\n\n&emsp;&emsp;A variable may also be initialized in its declaration.\n\nIf the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:\n\n```c\nchar esc = '\\\\';\nint i = 0;\nint limit MAXLINE+1;\nfloat eps = 1.0e-5;\n```\n\n## 2.5 Operators\n\n### 2.5.1 Arithmetic operators\n\n&emsp;&emsp;The C arithmetic operators are the symbols that are used to perform mathematical operations on operands. \n\nThere are **a total of 9 arithmetic operators** in C to provide the basic arithmetic operations such as addition, subtraction, multiplication, etc.\n\n| Operator | Arithmetic Operation   | Syntax  |\n|:--------:|:----------------------:|:-------:| \n| `+`      | Add two operands.      | `x + y` |\n| `–`      | Subtract the second operand from the first operand. | `x – y` |\n| `*`      | Multiply two operands. | `x * y` |\n| `/`      | Divide the first operand by the second operand. | `x / y` |\n| `%`      | Calculate the remainder when the first operand is divided by the second operand. | `x % y` |\n| `--`     | Decreases the integer value of the variable by one. | `--h` or `h--` |\n| `++`     | Increases the integer value of the variable by one. | `++h` or `h++` |\n| `+`      | Returns the value of its operand. | `+h` |\n| `-`      | Returns the negative of the value of its operand. | `-h` |\n\n```c\n// C program to demonstrate syntax of arithmetic operators\n#include <stdio.h>\n\nint main()\n{\n    int a = 10, b = 4, res;\n\n    // printing a and b\n    printf(\"a is %d and b is %d\\n\", a, b);\n\n    res = a + b; // addition\n    printf(\"a + b is %d\\n\", res);\n\n    res = a - b; // subtraction\n    printf(\"a - b is %d\\n\", res);\n\n    res = a * b; // multiplication\n    printf(\"a * b is %d\\n\", res);\n\n    res = a / b; // division\n    printf(\"a / b is %d\\n\", res);\n\n    res = a % b; // modulus\n    printf(\"a %% b is %d\\n\", res);\n\n    printf(\"Post Increment and Decrement\\n\");\n   \n    // post-increment example:\n    // res is assigned 10 only, a is not updated yet\n    res = a++;\n    printf(\"a is %d and result is %d\\n\", a, res); // a becomes 11 now\n    \n    // post-decrement example:\n    // res is assigned 11 only, a is not updated yet\n    res = a--;\n    printf(\"a is %d and result is %d\\n\", a, res); // a becomes 10 now\n\n    printf(\"\\nPre Increment and Decrement\\n\");\n\n    // pre-increment example:\n    // res is assigned 11 now since a is updated here itself\n    res = ++a;\n    // a and res have same values = 11\n    printf(\"a is %d and result is %d\\n\", a, res);\n\n    // pre-decrement example:\n    // res is assigned 10 only since a is updated here itself\n    res = --a;\n    // a and res have same values = 10\n    printf(\"a is %d and result is %d\\n\", a, res);\n\n    return 0;\n}\n```\n\n### 2.5.2 Assignment operators\n\n&emsp;&emsp;Assignment operators are used for assigning value to a variable.\n\nThe left side operand of the assignment operator is a variable and right side operand of the assignment operator is a value. \n\nThe value on the right side must be of **the same data-type** of the variable on the left side otherwise the compiler will raise an error. \n\n* `=` is the simplest assignment operator, which is used to assign the value on the right to the variable on the left.\n* `+=` is combination of `+` and `=` operators and `(a += b)` can be written as `(a = a + b)`.\n* `-=` is combination of `-` and `=` operators and `(a -= b)` can be written as `(a = a - b)`.\n* `*=` is combination of `*` and `=` operators and `(a *= b)` can be written as `(a = a * b)`.\n* `/=` is combination of `/` and `=` operators and `(a /= b)` can be written as `(a = a / b)`.\n\n```c\n// C program to demonstrate working of Assignment operators\n\n#include <stdio.h>\n\nint main()\n{\n    // Assigning value 10 to a\n    // using \"=\" operator\n    int a = 10;\n    printf(\"Value of a is %d\\n\", a);\n\n    // Assigning value by adding 10 to a\n    // using \"+=\" operator\n    a += 10;\n    printf(\"Value of a is %d\\n\", a);\n\n    // Assigning value by subtracting 10 from a\n    // using \"-=\" operator\n    a -= 10;\n    printf(\"Value of a is %d\\n\", a);\n\n    // Assigning value by multiplying 10 to a\n    // using \"*=\" operator\n    a *= 10;\n    printf(\"Value of a is %d\\n\", a);\n\n    // Assigning value by dividing 10 from a\n    // using \"/=\" operator\n    a /= 10;\n    printf(\"Value of a is %d\\n\", a);\n\n    return 0;\n}\n```\n\n### 2.5.3 Logical operators\n\n&emsp;&emsp;Logical operators in C are used to combine multiple conditions/constraints. *Logical Operators returns either 0 or 1, it depends on whether the expression result is `true` or `false`.*\n\nThere are 3 logical operators in the C language:\n\n1. Logical AND (`&&`)\n\n```c\n// C program for Logical\n// AND Operator\n#include <stdio.h>\n\n// Driver code\nint main()\n{\n    int a = 10, b = 20;\n\n    if (a > 0 && b > 0) \n    {\n        printf(\"Both values are greater than 0\\n\");\n    }\n    else \n    {\n        printf(\"Both values are less than 0\\n\");\n    }\n    return 0;\n}\n```\n\n2. Logical OR (`||`)\n\n```c\n// C program for Logical\n// OR Operator\n#include <stdio.h>\n\n// Driver code\nint main()\n{\n    int a = -1, b = 20;\n\n    if (a > 0 || b > 0) \n    {\n        printf(\"Any one of the given value is \"\n               \"greater than 0\\n\");\n    }\n    else \n    {\n        printf(\"Both values are less than 0\\n\");\n    }\n    return 0;\n}\n```\n\n3. Logical NOT (`!`)\n\n```c\n// C program for Logical\n// NOT Operator\n#include <stdio.h>\n\n// Driver code\nint main()\n{\n    int a = 10, b = 20;\n\n    if (!(a > 0 && b > 0)) \n    {\n        // condition returned true but\n        // logical NOT operator changed\n        // it to false\n        printf(\"Both values are greater than 0\\n\");\n    } \n    else \n    {\n        printf(\"Both values are less than 0\\n\");\n    }\n    return 0;\n}\n```\n\n&emsp;&emsp;When the result can be determined by evaluating the preceding Logical expression without evaluating the further operands, it is known as **short-circuiting**.\n\n### 2.5.4 Bitwise operators\n\n&emsp;&emsp;The following 6 operators are bitwise operators (also known as **bit operators** as they work at the bit-level).  \n\nThey are used to perform bitwise operations in C.\n\n```c\n// C Program to demonstrate use of bitwise operators\n\n#include <stdio.h>\nint main()\n{\n    // a = 5 (00000101 in 8-bit binary), b = 9 (00001001 in\n    // 8-bit binary)\n    unsigned int a = 5, b = 9;\n\n    // The result is 00000001\n    printf(\"a = %u, b = %u\\n\", a, b);\n    printf(\"a&b = %u\\n\", a & b);\n\n    // The result is 00001101\n    printf(\"a|b = %u\\n\", a | b);\n\n    // The result is 00001100\n    printf(\"a^b = %u\\n\", a ^ b);\n\n    // The result is 11111111111111111111111111111010\n    // (assuming 32-bit unsigned int)\n    printf(\"~a = %u\\n\", a = ~a);\n\n    // The result is 00010010\n    printf(\"b<<1 = %u\\n\", b << 1);\n\n    // The result is 00000100\n    printf(\"b>>1 = %u\\n\", b >> 1);\n\n    return 0;\n}\n```\n\n<a href=\"https://www.geeksforgeeks.org/assignment-operators-in-c-c/\"> knowledge webpage </a>\n\n## 2.6 Type conversions\n\n## 2.7 Expressions\n\n# 3 Control flow\n\n## 3.1 Statements and blocks\n\n&emsp;&emsp;An expression such as `x = 0` or `i++` or `printf(...)` becomes a *statement* when it is followed by a semicolon `;`, as in\n\n```c\nx = 0;\ni++;\nprintf(...);\n```\n\n> In C, semicolon is a statement terminator, rather than ...\n\n&emsp;&emsp;Curly braces `{` and `}` are used to group declarations and statements together into a compound statement, or block, so that *they are syntactically equivalent to a single statement*.\n\n## 3.2 Branches\n\n### 3.2.1 if-else\n\n&emsp;&emsp;The **if-else** statement is used to express decisions. Formally, the syntax is\n\n```c\nif (expression)\n    statement1;\nelse\n    statement2;\n```\n\nwhere the `else` part is optional.\n\n> &emsp;&emsp;The *expression* is evaluated, if it is true (*that is, if expression has a non-zero value*), **statement1** is executed. If it is false (*expression is zero*) and if there is an `else` part, **statement2** is executed instead.\n\n&emsp;&emsp;Since an `if` simply tests the numeric value of an expression, certain coding shortcuts are possible. The most obvious is writing\n\n```c\nif(expression)\n```\n\ninstead of \n\n```c\nif(expression != 0)\n```\n\n> &emsp;&emsp;Sometimes this is natural and clear; at other times it can be cryptic.\n\n---\n\n&emsp;&emsp;Because the else part of an if-else is optional, there is an ambiguit when an else is omitted from a nested if sequence.\n\nThis is resolved by associating the else with closest previous else-if. For example, in\n\n```c\nif (n > 0)\n    if (a > b)\n        z = a;\n    else\n        z = b;\n```\n\nthe else goes with the inner if.\n\n---\n\n### 3.2.2 else-if\n\n&emsp;&emsp;The construction\n\n```c\nif (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse\n    statement;\n```\n\nis the most general way of writing a *multi-way decision*. \n\n> &emsp;&emsp;The expression are evaluated in order; *if any expression is true, the statement associated with it is executed, and this terminates the whole chain*. The last `else` part handles the “none of the above” or default case where none of the other conditions is satisfied.\n\n&emsp;&emsp;Sometimes there is no explicit action for the default; in that case the trailing\n\n```c\nelse\n    statement\n```\n\ncan be ommitted, it may be used for error checking to *catch an \"impossible\" condition*.\n\n### 3.2.3 switch\n\n&emsp;&emsp;The **switch** statement is a multi-way decision that tests whether an expression matches one of a number of constant integer values, and branches accordingly.\n\n```c\nswitch (expression)\n{\n    case const-expr: statements\n    case const-expr: statements\n    default: statements\n}\n```\n\nEach **case** is labeled by one or more integer-valued constants or constant expressions.\n\nIf a case matches the expression value, *execution **starts** at the case. (All case expressions must be different.)*\n\nThe case labeled **default** is executed if none of the other cases are satisfied. (A default is optional.)\n\nIf there isn't a \"default\" and if none of the cases match, *no action at all takes place*.\n\nCases and the defult clause can occur in any order.\n\n## 3.3 Loops\n\n### 3.3.1 while\n\n### 3.3.2 for\n\n### 3.3.3 do-while\n\n## 3.4 break and continue\n\n## 3.5 goto\n\n# 4 Functions and program structure\n\n## 4.1 Basics of functions\n\n","source":"_posts/c-language.md","raw":"---\ntitle: \"C Language\"\ndate: 2024-12-22 23:08:36\ncategories:\n- C\ntags:\n- C\n---\n\n# 1 Introduction to C\n\n&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. \n\n```c\n#include <stdio.h>  //include information about standard library\n\nmain()  //define a funcation named \"main\"\n{  //statements of \"main\" are enclosed in braces\n    printf(\"hello, world\\n\");\n}\n```\n\n> &emsp;&emsp;A C program begins executing at the beginning of **main**. This means that every C program must have a **main** somewhere.\n\n# 2 Types, operators, and expressions\n\n## 2.1 Variable names\n\nThere are some restrictions on the names of variables and symbolic constants:\n\n* Names are made up of letters and digits; the first character must be a letter. \n* The underscore `_` counts as a letter, it is sometimes useful for **improving the readability of long variable names**. (Don't begin variable names with underscore, however, since library routines often use such names. )\n* **Upper case and lower case letters are distinct**, so \"x\" and \"X\" are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)\n\n## 2.2 Data types and sizes\n\nThere are only a few basic data types in C:\n\n| type    | description                                                                          |\n|:-------:|:------------------------------------------------------------------------------------:|\n| `char`  | **A single byte**, capable of holding one character in the local character set.      |\n| `int`   | An integer, *typically reflecting the natural size of integers on the host machine*. |\n| `float` | Single-precision floating point.                                                     |\n| `double`| Double-precision floating point.                                                     |\n\n&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. \n\n`short` and `long` apply to integers:\n\n```c\nshort int sh;\nlong int counter;\n```\n\n&emsp;&emsp;The word \"int\" can be omitted in such declarations, and typically is.\n\n```c\nshort sh;\nlong counter;\n```\n\n> &emsp;&emsp;The intent is that `short` and `long` should provide different lengths of integers where practical; `int` will normally be the natural size for a particular machine.\n\nOn a 32-bit machine, `short` is often 16 bits, `long` 32 bits, and `int` either 16 or 32 bits.\n\nOn a 64-bit machine, `short` is 16 bits, `long` 64 bits, and `int` 32 bits.\n\n...\n\n> &emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that *`short`s and `int`s are at least 16 bits, `long`s are at least 32 bits, and `short` is no longer than `int`, which is no longer than `long`*.\n\n## 2.3 Constants\n\n&emsp;&emsp;An integer constant like `1234` is an `int`. A `long` constant is written with a terminal `l` or `L`, as in `123456789L`; an integer too big to fit into an `int` will also be taken as a `long`. The `unsigned int` constants are written with a terminal `u` or `U`, and the suffix `ul` or `UL` indicates `unsigned long`.\n\n```c\nint a = 1234;\nunsigned int ua = 1234u;\n\nlong b = 1234567890L;\nunsigned long ub = 1234567890UL;\n```\n\nThe value of an integer *can be specified in octal or hexadecimal instead of decimal*: A leading `0` on an integer constant means **octal**; a leading `0x` or `0X` means **hexadecimal**.  \n\n```c\nint a = 037;  // 31 in octal\nint b = 0x1F;  // 31 in hexadecimal\n\nprintf(\"a(037) = %d\\n\", a);  // a(037) = 31\nprintf(\"b(0x1F) = %d\\n\", b);  // b(0x1F) = 31\n```\n\n&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is `double`, unless suffixed. The suffixes `f` or `F` indicate a `float` constant; `l` or `L` indicate a `long double`.\n\n```c\ndouble d = 12.34;\nfloat f = 12.34f;\nlong double ld = 12.34L;\n```\n\n&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as `'x'`. The value of a character constant is the numeric value of the character in the machine's character set.\n\n```c\nchar c = 'x';\n```\n\n> &emsp;&emsp;For example, in the ASCII character set the character constant `'0'` has the value `48`, which is unrelated to the numeric value `0`. If we write `'0'` instead of a numeric value like `48` that depends on character set, *the program is independent of the particular value and easier to read*.\n\n```c\nchar c = '0';\nint ci = c;  //ci = 48 \n```\n\n## 2.4 Declarations\n\n&emsp;&emsp;*All variables must be declared before use*, although certain declarations can be made implicitly by context.\n\nA declaration specifies a type, and contains a list of one or more variables of that type, as in:\n\n```c\nint lower, upper, step;\nchar c, line[100];\n```\n\nVariables can be distributed among declarations in any fashion; the lists above could equally well be written as:\n\n```c\nint lower;\nint upper;\nint step;\nchar c;\nchar line[1000];\n```\n\n> &emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.\n\n&emsp;&emsp;A variable may also be initialized in its declaration.\n\nIf the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:\n\n```c\nchar esc = '\\\\';\nint i = 0;\nint limit MAXLINE+1;\nfloat eps = 1.0e-5;\n```\n\n## 2.5 Operators\n\n### 2.5.1 Arithmetic operators\n\n&emsp;&emsp;The C arithmetic operators are the symbols that are used to perform mathematical operations on operands. \n\nThere are **a total of 9 arithmetic operators** in C to provide the basic arithmetic operations such as addition, subtraction, multiplication, etc.\n\n| Operator | Arithmetic Operation   | Syntax  |\n|:--------:|:----------------------:|:-------:| \n| `+`      | Add two operands.      | `x + y` |\n| `–`      | Subtract the second operand from the first operand. | `x – y` |\n| `*`      | Multiply two operands. | `x * y` |\n| `/`      | Divide the first operand by the second operand. | `x / y` |\n| `%`      | Calculate the remainder when the first operand is divided by the second operand. | `x % y` |\n| `--`     | Decreases the integer value of the variable by one. | `--h` or `h--` |\n| `++`     | Increases the integer value of the variable by one. | `++h` or `h++` |\n| `+`      | Returns the value of its operand. | `+h` |\n| `-`      | Returns the negative of the value of its operand. | `-h` |\n\n```c\n// C program to demonstrate syntax of arithmetic operators\n#include <stdio.h>\n\nint main()\n{\n    int a = 10, b = 4, res;\n\n    // printing a and b\n    printf(\"a is %d and b is %d\\n\", a, b);\n\n    res = a + b; // addition\n    printf(\"a + b is %d\\n\", res);\n\n    res = a - b; // subtraction\n    printf(\"a - b is %d\\n\", res);\n\n    res = a * b; // multiplication\n    printf(\"a * b is %d\\n\", res);\n\n    res = a / b; // division\n    printf(\"a / b is %d\\n\", res);\n\n    res = a % b; // modulus\n    printf(\"a %% b is %d\\n\", res);\n\n    printf(\"Post Increment and Decrement\\n\");\n   \n    // post-increment example:\n    // res is assigned 10 only, a is not updated yet\n    res = a++;\n    printf(\"a is %d and result is %d\\n\", a, res); // a becomes 11 now\n    \n    // post-decrement example:\n    // res is assigned 11 only, a is not updated yet\n    res = a--;\n    printf(\"a is %d and result is %d\\n\", a, res); // a becomes 10 now\n\n    printf(\"\\nPre Increment and Decrement\\n\");\n\n    // pre-increment example:\n    // res is assigned 11 now since a is updated here itself\n    res = ++a;\n    // a and res have same values = 11\n    printf(\"a is %d and result is %d\\n\", a, res);\n\n    // pre-decrement example:\n    // res is assigned 10 only since a is updated here itself\n    res = --a;\n    // a and res have same values = 10\n    printf(\"a is %d and result is %d\\n\", a, res);\n\n    return 0;\n}\n```\n\n### 2.5.2 Assignment operators\n\n&emsp;&emsp;Assignment operators are used for assigning value to a variable.\n\nThe left side operand of the assignment operator is a variable and right side operand of the assignment operator is a value. \n\nThe value on the right side must be of **the same data-type** of the variable on the left side otherwise the compiler will raise an error. \n\n* `=` is the simplest assignment operator, which is used to assign the value on the right to the variable on the left.\n* `+=` is combination of `+` and `=` operators and `(a += b)` can be written as `(a = a + b)`.\n* `-=` is combination of `-` and `=` operators and `(a -= b)` can be written as `(a = a - b)`.\n* `*=` is combination of `*` and `=` operators and `(a *= b)` can be written as `(a = a * b)`.\n* `/=` is combination of `/` and `=` operators and `(a /= b)` can be written as `(a = a / b)`.\n\n```c\n// C program to demonstrate working of Assignment operators\n\n#include <stdio.h>\n\nint main()\n{\n    // Assigning value 10 to a\n    // using \"=\" operator\n    int a = 10;\n    printf(\"Value of a is %d\\n\", a);\n\n    // Assigning value by adding 10 to a\n    // using \"+=\" operator\n    a += 10;\n    printf(\"Value of a is %d\\n\", a);\n\n    // Assigning value by subtracting 10 from a\n    // using \"-=\" operator\n    a -= 10;\n    printf(\"Value of a is %d\\n\", a);\n\n    // Assigning value by multiplying 10 to a\n    // using \"*=\" operator\n    a *= 10;\n    printf(\"Value of a is %d\\n\", a);\n\n    // Assigning value by dividing 10 from a\n    // using \"/=\" operator\n    a /= 10;\n    printf(\"Value of a is %d\\n\", a);\n\n    return 0;\n}\n```\n\n### 2.5.3 Logical operators\n\n&emsp;&emsp;Logical operators in C are used to combine multiple conditions/constraints. *Logical Operators returns either 0 or 1, it depends on whether the expression result is `true` or `false`.*\n\nThere are 3 logical operators in the C language:\n\n1. Logical AND (`&&`)\n\n```c\n// C program for Logical\n// AND Operator\n#include <stdio.h>\n\n// Driver code\nint main()\n{\n    int a = 10, b = 20;\n\n    if (a > 0 && b > 0) \n    {\n        printf(\"Both values are greater than 0\\n\");\n    }\n    else \n    {\n        printf(\"Both values are less than 0\\n\");\n    }\n    return 0;\n}\n```\n\n2. Logical OR (`||`)\n\n```c\n// C program for Logical\n// OR Operator\n#include <stdio.h>\n\n// Driver code\nint main()\n{\n    int a = -1, b = 20;\n\n    if (a > 0 || b > 0) \n    {\n        printf(\"Any one of the given value is \"\n               \"greater than 0\\n\");\n    }\n    else \n    {\n        printf(\"Both values are less than 0\\n\");\n    }\n    return 0;\n}\n```\n\n3. Logical NOT (`!`)\n\n```c\n// C program for Logical\n// NOT Operator\n#include <stdio.h>\n\n// Driver code\nint main()\n{\n    int a = 10, b = 20;\n\n    if (!(a > 0 && b > 0)) \n    {\n        // condition returned true but\n        // logical NOT operator changed\n        // it to false\n        printf(\"Both values are greater than 0\\n\");\n    } \n    else \n    {\n        printf(\"Both values are less than 0\\n\");\n    }\n    return 0;\n}\n```\n\n&emsp;&emsp;When the result can be determined by evaluating the preceding Logical expression without evaluating the further operands, it is known as **short-circuiting**.\n\n### 2.5.4 Bitwise operators\n\n&emsp;&emsp;The following 6 operators are bitwise operators (also known as **bit operators** as they work at the bit-level).  \n\nThey are used to perform bitwise operations in C.\n\n```c\n// C Program to demonstrate use of bitwise operators\n\n#include <stdio.h>\nint main()\n{\n    // a = 5 (00000101 in 8-bit binary), b = 9 (00001001 in\n    // 8-bit binary)\n    unsigned int a = 5, b = 9;\n\n    // The result is 00000001\n    printf(\"a = %u, b = %u\\n\", a, b);\n    printf(\"a&b = %u\\n\", a & b);\n\n    // The result is 00001101\n    printf(\"a|b = %u\\n\", a | b);\n\n    // The result is 00001100\n    printf(\"a^b = %u\\n\", a ^ b);\n\n    // The result is 11111111111111111111111111111010\n    // (assuming 32-bit unsigned int)\n    printf(\"~a = %u\\n\", a = ~a);\n\n    // The result is 00010010\n    printf(\"b<<1 = %u\\n\", b << 1);\n\n    // The result is 00000100\n    printf(\"b>>1 = %u\\n\", b >> 1);\n\n    return 0;\n}\n```\n\n<a href=\"https://www.geeksforgeeks.org/assignment-operators-in-c-c/\"> knowledge webpage </a>\n\n## 2.6 Type conversions\n\n## 2.7 Expressions\n\n# 3 Control flow\n\n## 3.1 Statements and blocks\n\n&emsp;&emsp;An expression such as `x = 0` or `i++` or `printf(...)` becomes a *statement* when it is followed by a semicolon `;`, as in\n\n```c\nx = 0;\ni++;\nprintf(...);\n```\n\n> In C, semicolon is a statement terminator, rather than ...\n\n&emsp;&emsp;Curly braces `{` and `}` are used to group declarations and statements together into a compound statement, or block, so that *they are syntactically equivalent to a single statement*.\n\n## 3.2 Branches\n\n### 3.2.1 if-else\n\n&emsp;&emsp;The **if-else** statement is used to express decisions. Formally, the syntax is\n\n```c\nif (expression)\n    statement1;\nelse\n    statement2;\n```\n\nwhere the `else` part is optional.\n\n> &emsp;&emsp;The *expression* is evaluated, if it is true (*that is, if expression has a non-zero value*), **statement1** is executed. If it is false (*expression is zero*) and if there is an `else` part, **statement2** is executed instead.\n\n&emsp;&emsp;Since an `if` simply tests the numeric value of an expression, certain coding shortcuts are possible. The most obvious is writing\n\n```c\nif(expression)\n```\n\ninstead of \n\n```c\nif(expression != 0)\n```\n\n> &emsp;&emsp;Sometimes this is natural and clear; at other times it can be cryptic.\n\n---\n\n&emsp;&emsp;Because the else part of an if-else is optional, there is an ambiguit when an else is omitted from a nested if sequence.\n\nThis is resolved by associating the else with closest previous else-if. For example, in\n\n```c\nif (n > 0)\n    if (a > b)\n        z = a;\n    else\n        z = b;\n```\n\nthe else goes with the inner if.\n\n---\n\n### 3.2.2 else-if\n\n&emsp;&emsp;The construction\n\n```c\nif (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse\n    statement;\n```\n\nis the most general way of writing a *multi-way decision*. \n\n> &emsp;&emsp;The expression are evaluated in order; *if any expression is true, the statement associated with it is executed, and this terminates the whole chain*. The last `else` part handles the “none of the above” or default case where none of the other conditions is satisfied.\n\n&emsp;&emsp;Sometimes there is no explicit action for the default; in that case the trailing\n\n```c\nelse\n    statement\n```\n\ncan be ommitted, it may be used for error checking to *catch an \"impossible\" condition*.\n\n### 3.2.3 switch\n\n&emsp;&emsp;The **switch** statement is a multi-way decision that tests whether an expression matches one of a number of constant integer values, and branches accordingly.\n\n```c\nswitch (expression)\n{\n    case const-expr: statements\n    case const-expr: statements\n    default: statements\n}\n```\n\nEach **case** is labeled by one or more integer-valued constants or constant expressions.\n\nIf a case matches the expression value, *execution **starts** at the case. (All case expressions must be different.)*\n\nThe case labeled **default** is executed if none of the other cases are satisfied. (A default is optional.)\n\nIf there isn't a \"default\" and if none of the cases match, *no action at all takes place*.\n\nCases and the defult clause can occur in any order.\n\n## 3.3 Loops\n\n### 3.3.1 while\n\n### 3.3.2 for\n\n### 3.3.3 do-while\n\n## 3.4 break and continue\n\n## 3.5 goto\n\n# 4 Functions and program structure\n\n## 4.1 Basics of functions\n\n","slug":"c-language","published":1,"updated":"2025-02-14T15:35:11.079Z","_id":"cm626nngv0000osij9lpebu1a","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"1-Introduction-to-C\"><a href=\"#1-Introduction-to-C\" class=\"headerlink\" title=\"1 Introduction to C\"></a>1 Introduction to C</h1><p>&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. </p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;  //include information about standard library\n\nmain()  //define a funcation named &quot;main&quot;\n&#123;  //statements of &quot;main&quot; are enclosed in braces\n    printf(&quot;hello, world\\n&quot;);\n&#125;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;A C program begins executing at the beginning of <strong>main</strong>. This means that every C program must have a <strong>main</strong> somewhere.</p>\n</blockquote>\n<h1 id=\"2-Types-operators-and-expressions\"><a href=\"#2-Types-operators-and-expressions\" class=\"headerlink\" title=\"2 Types, operators, and expressions\"></a>2 Types, operators, and expressions</h1><h2 id=\"2-1-Variable-names\"><a href=\"#2-1-Variable-names\" class=\"headerlink\" title=\"2.1 Variable names\"></a>2.1 Variable names</h2><p>There are some restrictions on the names of variables and symbolic constants:</p>\n<ul>\n<li>Names are made up of letters and digits; the first character must be a letter. </li>\n<li>The underscore <code>_</code> counts as a letter, it is sometimes useful for <strong>improving the readability of long variable names</strong>. (Don’t begin variable names with underscore, however, since library routines often use such names. )</li>\n<li><strong>Upper case and lower case letters are distinct</strong>, so “x” and “X” are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)</li>\n</ul>\n<h2 id=\"2-2-Data-types-and-sizes\"><a href=\"#2-2-Data-types-and-sizes\" class=\"headerlink\" title=\"2.2 Data types and sizes\"></a>2.2 Data types and sizes</h2><p>There are only a few basic data types in C:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">type</th>\n<th align=\"center\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>char</code></td>\n<td align=\"center\"><strong>A single byte</strong>, capable of holding one character in the local character set.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>int</code></td>\n<td align=\"center\">An integer, <em>typically reflecting the natural size of integers on the host machine</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>float</code></td>\n<td align=\"center\">Single-precision floating point.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>double</code></td>\n<td align=\"center\">Double-precision floating point.</td>\n</tr>\n</tbody></table>\n<p>&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. </p>\n<p><code>short</code> and <code>long</code> apply to integers:</p>\n<pre><code class=\"c\">short int sh;\nlong int counter;\n</code></pre>\n<p>&emsp;&emsp;The word “int” can be omitted in such declarations, and typically is.</p>\n<pre><code class=\"c\">short sh;\nlong counter;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;The intent is that <code>short</code> and <code>long</code> should provide different lengths of integers where practical; <code>int</code> will normally be the natural size for a particular machine.</p>\n</blockquote>\n<p>On a 32-bit machine, <code>short</code> is often 16 bits, <code>long</code> 32 bits, and <code>int</code> either 16 or 32 bits.</p>\n<p>On a 64-bit machine, <code>short</code> is 16 bits, <code>long</code> 64 bits, and <code>int</code> 32 bits.</p>\n<p>…</p>\n<blockquote>\n<p>&emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that <em><code>short</code>s and <code>int</code>s are at least 16 bits, <code>long</code>s are at least 32 bits, and <code>short</code> is no longer than <code>int</code>, which is no longer than <code>long</code></em>.</p>\n</blockquote>\n<h2 id=\"2-3-Constants\"><a href=\"#2-3-Constants\" class=\"headerlink\" title=\"2.3 Constants\"></a>2.3 Constants</h2><p>&emsp;&emsp;An integer constant like <code>1234</code> is an <code>int</code>. A <code>long</code> constant is written with a terminal <code>l</code> or <code>L</code>, as in <code>123456789L</code>; an integer too big to fit into an <code>int</code> will also be taken as a <code>long</code>. The <code>unsigned int</code> constants are written with a terminal <code>u</code> or <code>U</code>, and the suffix <code>ul</code> or <code>UL</code> indicates <code>unsigned long</code>.</p>\n<pre><code class=\"c\">int a = 1234;\nunsigned int ua = 1234u;\n\nlong b = 1234567890L;\nunsigned long ub = 1234567890UL;\n</code></pre>\n<p>The value of an integer <em>can be specified in octal or hexadecimal instead of decimal</em>: A leading <code>0</code> on an integer constant means <strong>octal</strong>; a leading <code>0x</code> or <code>0X</code> means <strong>hexadecimal</strong>.  </p>\n<pre><code class=\"c\">int a = 037;  // 31 in octal\nint b = 0x1F;  // 31 in hexadecimal\n\nprintf(&quot;a(037) = %d\\n&quot;, a);  // a(037) = 31\nprintf(&quot;b(0x1F) = %d\\n&quot;, b);  // b(0x1F) = 31\n</code></pre>\n<p>&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is <code>double</code>, unless suffixed. The suffixes <code>f</code> or <code>F</code> indicate a <code>float</code> constant; <code>l</code> or <code>L</code> indicate a <code>long double</code>.</p>\n<pre><code class=\"c\">double d = 12.34;\nfloat f = 12.34f;\nlong double ld = 12.34L;\n</code></pre>\n<p>&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as <code>&#39;x&#39;</code>. The value of a character constant is the numeric value of the character in the machine’s character set.</p>\n<pre><code class=\"c\">char c = &#39;x&#39;;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;For example, in the ASCII character set the character constant <code>&#39;0&#39;</code> has the value <code>48</code>, which is unrelated to the numeric value <code>0</code>. If we write <code>&#39;0&#39;</code> instead of a numeric value like <code>48</code> that depends on character set, <em>the program is independent of the particular value and easier to read</em>.</p>\n</blockquote>\n<pre><code class=\"c\">char c = &#39;0&#39;;\nint ci = c;  //ci = 48 \n</code></pre>\n<h2 id=\"2-4-Declarations\"><a href=\"#2-4-Declarations\" class=\"headerlink\" title=\"2.4 Declarations\"></a>2.4 Declarations</h2><p>&emsp;&emsp;<em>All variables must be declared before use</em>, although certain declarations can be made implicitly by context.</p>\n<p>A declaration specifies a type, and contains a list of one or more variables of that type, as in:</p>\n<pre><code class=\"c\">int lower, upper, step;\nchar c, line[100];\n</code></pre>\n<p>Variables can be distributed among declarations in any fashion; the lists above could equally well be written as:</p>\n<pre><code class=\"c\">int lower;\nint upper;\nint step;\nchar c;\nchar line[1000];\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.</p>\n</blockquote>\n<p>&emsp;&emsp;A variable may also be initialized in its declaration.</p>\n<p>If the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:</p>\n<pre><code class=\"c\">char esc = &#39;\\\\&#39;;\nint i = 0;\nint limit MAXLINE+1;\nfloat eps = 1.0e-5;\n</code></pre>\n<h2 id=\"2-5-Operators\"><a href=\"#2-5-Operators\" class=\"headerlink\" title=\"2.5 Operators\"></a>2.5 Operators</h2><h3 id=\"2-5-1-Arithmetic-operators\"><a href=\"#2-5-1-Arithmetic-operators\" class=\"headerlink\" title=\"2.5.1 Arithmetic operators\"></a>2.5.1 Arithmetic operators</h3><p>&emsp;&emsp;The C arithmetic operators are the symbols that are used to perform mathematical operations on operands. </p>\n<p>There are <strong>a total of 9 arithmetic operators</strong> in C to provide the basic arithmetic operations such as addition, subtraction, multiplication, etc.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Operator</th>\n<th align=\"center\">Arithmetic Operation</th>\n<th align=\"center\">Syntax</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>+</code></td>\n<td align=\"center\">Add two operands.</td>\n<td align=\"center\"><code>x + y</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>–</code></td>\n<td align=\"center\">Subtract the second operand from the first operand.</td>\n<td align=\"center\"><code>x – y</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">Multiply two operands.</td>\n<td align=\"center\"><code>x * y</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">Divide the first operand by the second operand.</td>\n<td align=\"center\"><code>x / y</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>%</code></td>\n<td align=\"center\">Calculate the remainder when the first operand is divided by the second operand.</td>\n<td align=\"center\"><code>x % y</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>--</code></td>\n<td align=\"center\">Decreases the integer value of the variable by one.</td>\n<td align=\"center\"><code>--h</code> or <code>h--</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>++</code></td>\n<td align=\"center\">Increases the integer value of the variable by one.</td>\n<td align=\"center\"><code>++h</code> or <code>h++</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>+</code></td>\n<td align=\"center\">Returns the value of its operand.</td>\n<td align=\"center\"><code>+h</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">Returns the negative of the value of its operand.</td>\n<td align=\"center\"><code>-h</code></td>\n</tr>\n</tbody></table>\n<pre><code class=\"c\">// C program to demonstrate syntax of arithmetic operators\n#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n    int a = 10, b = 4, res;\n\n    // printing a and b\n    printf(&quot;a is %d and b is %d\\n&quot;, a, b);\n\n    res = a + b; // addition\n    printf(&quot;a + b is %d\\n&quot;, res);\n\n    res = a - b; // subtraction\n    printf(&quot;a - b is %d\\n&quot;, res);\n\n    res = a * b; // multiplication\n    printf(&quot;a * b is %d\\n&quot;, res);\n\n    res = a / b; // division\n    printf(&quot;a / b is %d\\n&quot;, res);\n\n    res = a % b; // modulus\n    printf(&quot;a %% b is %d\\n&quot;, res);\n\n    printf(&quot;Post Increment and Decrement\\n&quot;);\n   \n    // post-increment example:\n    // res is assigned 10 only, a is not updated yet\n    res = a++;\n    printf(&quot;a is %d and result is %d\\n&quot;, a, res); // a becomes 11 now\n    \n    // post-decrement example:\n    // res is assigned 11 only, a is not updated yet\n    res = a--;\n    printf(&quot;a is %d and result is %d\\n&quot;, a, res); // a becomes 10 now\n\n    printf(&quot;\\nPre Increment and Decrement\\n&quot;);\n\n    // pre-increment example:\n    // res is assigned 11 now since a is updated here itself\n    res = ++a;\n    // a and res have same values = 11\n    printf(&quot;a is %d and result is %d\\n&quot;, a, res);\n\n    // pre-decrement example:\n    // res is assigned 10 only since a is updated here itself\n    res = --a;\n    // a and res have same values = 10\n    printf(&quot;a is %d and result is %d\\n&quot;, a, res);\n\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"2-5-2-Assignment-operators\"><a href=\"#2-5-2-Assignment-operators\" class=\"headerlink\" title=\"2.5.2 Assignment operators\"></a>2.5.2 Assignment operators</h3><p>&emsp;&emsp;Assignment operators are used for assigning value to a variable.</p>\n<p>The left side operand of the assignment operator is a variable and right side operand of the assignment operator is a value. </p>\n<p>The value on the right side must be of <strong>the same data-type</strong> of the variable on the left side otherwise the compiler will raise an error. </p>\n<ul>\n<li><code>=</code> is the simplest assignment operator, which is used to assign the value on the right to the variable on the left.</li>\n<li><code>+=</code> is combination of <code>+</code> and <code>=</code> operators and <code>(a += b)</code> can be written as <code>(a = a + b)</code>.</li>\n<li><code>-=</code> is combination of <code>-</code> and <code>=</code> operators and <code>(a -= b)</code> can be written as <code>(a = a - b)</code>.</li>\n<li><code>*=</code> is combination of <code>*</code> and <code>=</code> operators and <code>(a *= b)</code> can be written as <code>(a = a * b)</code>.</li>\n<li><code>/=</code> is combination of <code>/</code> and <code>=</code> operators and <code>(a /= b)</code> can be written as <code>(a = a / b)</code>.</li>\n</ul>\n<pre><code class=\"c\">// C program to demonstrate working of Assignment operators\n\n#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n    // Assigning value 10 to a\n    // using &quot;=&quot; operator\n    int a = 10;\n    printf(&quot;Value of a is %d\\n&quot;, a);\n\n    // Assigning value by adding 10 to a\n    // using &quot;+=&quot; operator\n    a += 10;\n    printf(&quot;Value of a is %d\\n&quot;, a);\n\n    // Assigning value by subtracting 10 from a\n    // using &quot;-=&quot; operator\n    a -= 10;\n    printf(&quot;Value of a is %d\\n&quot;, a);\n\n    // Assigning value by multiplying 10 to a\n    // using &quot;*=&quot; operator\n    a *= 10;\n    printf(&quot;Value of a is %d\\n&quot;, a);\n\n    // Assigning value by dividing 10 from a\n    // using &quot;/=&quot; operator\n    a /= 10;\n    printf(&quot;Value of a is %d\\n&quot;, a);\n\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"2-5-3-Logical-operators\"><a href=\"#2-5-3-Logical-operators\" class=\"headerlink\" title=\"2.5.3 Logical operators\"></a>2.5.3 Logical operators</h3><p>&emsp;&emsp;Logical operators in C are used to combine multiple conditions&#x2F;constraints. <em>Logical Operators returns either 0 or 1, it depends on whether the expression result is <code>true</code> or <code>false</code>.</em></p>\n<p>There are 3 logical operators in the C language:</p>\n<ol>\n<li>Logical AND (<code>&amp;&amp;</code>)</li>\n</ol>\n<pre><code class=\"c\">// C program for Logical\n// AND Operator\n#include &lt;stdio.h&gt;\n\n// Driver code\nint main()\n&#123;\n    int a = 10, b = 20;\n\n    if (a &gt; 0 &amp;&amp; b &gt; 0) \n    &#123;\n        printf(&quot;Both values are greater than 0\\n&quot;);\n    &#125;\n    else \n    &#123;\n        printf(&quot;Both values are less than 0\\n&quot;);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>Logical OR (<code>||</code>)</li>\n</ol>\n<pre><code class=\"c\">// C program for Logical\n// OR Operator\n#include &lt;stdio.h&gt;\n\n// Driver code\nint main()\n&#123;\n    int a = -1, b = 20;\n\n    if (a &gt; 0 || b &gt; 0) \n    &#123;\n        printf(&quot;Any one of the given value is &quot;\n               &quot;greater than 0\\n&quot;);\n    &#125;\n    else \n    &#123;\n        printf(&quot;Both values are less than 0\\n&quot;);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"3\">\n<li>Logical NOT (<code>!</code>)</li>\n</ol>\n<pre><code class=\"c\">// C program for Logical\n// NOT Operator\n#include &lt;stdio.h&gt;\n\n// Driver code\nint main()\n&#123;\n    int a = 10, b = 20;\n\n    if (!(a &gt; 0 &amp;&amp; b &gt; 0)) \n    &#123;\n        // condition returned true but\n        // logical NOT operator changed\n        // it to false\n        printf(&quot;Both values are greater than 0\\n&quot;);\n    &#125; \n    else \n    &#123;\n        printf(&quot;Both values are less than 0\\n&quot;);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<p>&emsp;&emsp;When the result can be determined by evaluating the preceding Logical expression without evaluating the further operands, it is known as <strong>short-circuiting</strong>.</p>\n<h3 id=\"2-5-4-Bitwise-operators\"><a href=\"#2-5-4-Bitwise-operators\" class=\"headerlink\" title=\"2.5.4 Bitwise operators\"></a>2.5.4 Bitwise operators</h3><p>&emsp;&emsp;The following 6 operators are bitwise operators (also known as <strong>bit operators</strong> as they work at the bit-level).  </p>\n<p>They are used to perform bitwise operations in C.</p>\n<pre><code class=\"c\">// C Program to demonstrate use of bitwise operators\n\n#include &lt;stdio.h&gt;\nint main()\n&#123;\n    // a = 5 (00000101 in 8-bit binary), b = 9 (00001001 in\n    // 8-bit binary)\n    unsigned int a = 5, b = 9;\n\n    // The result is 00000001\n    printf(&quot;a = %u, b = %u\\n&quot;, a, b);\n    printf(&quot;a&amp;b = %u\\n&quot;, a &amp; b);\n\n    // The result is 00001101\n    printf(&quot;a|b = %u\\n&quot;, a | b);\n\n    // The result is 00001100\n    printf(&quot;a^b = %u\\n&quot;, a ^ b);\n\n    // The result is 11111111111111111111111111111010\n    // (assuming 32-bit unsigned int)\n    printf(&quot;~a = %u\\n&quot;, a = ~a);\n\n    // The result is 00010010\n    printf(&quot;b&lt;&lt;1 = %u\\n&quot;, b &lt;&lt; 1);\n\n    // The result is 00000100\n    printf(&quot;b&gt;&gt;1 = %u\\n&quot;, b &gt;&gt; 1);\n\n    return 0;\n&#125;\n</code></pre>\n<p><a href=\"https://www.geeksforgeeks.org/assignment-operators-in-c-c/\"> knowledge webpage </a></p>\n<h2 id=\"2-6-Type-conversions\"><a href=\"#2-6-Type-conversions\" class=\"headerlink\" title=\"2.6 Type conversions\"></a>2.6 Type conversions</h2><h2 id=\"2-7-Expressions\"><a href=\"#2-7-Expressions\" class=\"headerlink\" title=\"2.7 Expressions\"></a>2.7 Expressions</h2><h1 id=\"3-Control-flow\"><a href=\"#3-Control-flow\" class=\"headerlink\" title=\"3 Control flow\"></a>3 Control flow</h1><h2 id=\"3-1-Statements-and-blocks\"><a href=\"#3-1-Statements-and-blocks\" class=\"headerlink\" title=\"3.1 Statements and blocks\"></a>3.1 Statements and blocks</h2><p>&emsp;&emsp;An expression such as <code>x = 0</code> or <code>i++</code> or <code>printf(...)</code> becomes a <em>statement</em> when it is followed by a semicolon <code>;</code>, as in</p>\n<pre><code class=\"c\">x = 0;\ni++;\nprintf(...);\n</code></pre>\n<blockquote>\n<p>In C, semicolon is a statement terminator, rather than …</p>\n</blockquote>\n<p>&emsp;&emsp;Curly braces <code>&#123;</code> and <code>&#125;</code> are used to group declarations and statements together into a compound statement, or block, so that <em>they are syntactically equivalent to a single statement</em>.</p>\n<h2 id=\"3-2-Branches\"><a href=\"#3-2-Branches\" class=\"headerlink\" title=\"3.2 Branches\"></a>3.2 Branches</h2><h3 id=\"3-2-1-if-else\"><a href=\"#3-2-1-if-else\" class=\"headerlink\" title=\"3.2.1 if-else\"></a>3.2.1 if-else</h3><p>&emsp;&emsp;The <strong>if-else</strong> statement is used to express decisions. Formally, the syntax is</p>\n<pre><code class=\"c\">if (expression)\n    statement1;\nelse\n    statement2;\n</code></pre>\n<p>where the <code>else</code> part is optional.</p>\n<blockquote>\n<p>&emsp;&emsp;The <em>expression</em> is evaluated, if it is true (<em>that is, if expression has a non-zero value</em>), <strong>statement1</strong> is executed. If it is false (<em>expression is zero</em>) and if there is an <code>else</code> part, <strong>statement2</strong> is executed instead.</p>\n</blockquote>\n<p>&emsp;&emsp;Since an <code>if</code> simply tests the numeric value of an expression, certain coding shortcuts are possible. The most obvious is writing</p>\n<pre><code class=\"c\">if(expression)\n</code></pre>\n<p>instead of </p>\n<pre><code class=\"c\">if(expression != 0)\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;Sometimes this is natural and clear; at other times it can be cryptic.</p>\n</blockquote>\n<hr>\n<p>&emsp;&emsp;Because the else part of an if-else is optional, there is an ambiguit when an else is omitted from a nested if sequence.</p>\n<p>This is resolved by associating the else with closest previous else-if. For example, in</p>\n<pre><code class=\"c\">if (n &gt; 0)\n    if (a &gt; b)\n        z = a;\n    else\n        z = b;\n</code></pre>\n<p>the else goes with the inner if.</p>\n<hr>\n<h3 id=\"3-2-2-else-if\"><a href=\"#3-2-2-else-if\" class=\"headerlink\" title=\"3.2.2 else-if\"></a>3.2.2 else-if</h3><p>&emsp;&emsp;The construction</p>\n<pre><code class=\"c\">if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse\n    statement;\n</code></pre>\n<p>is the most general way of writing a <em>multi-way decision</em>. </p>\n<blockquote>\n<p>&emsp;&emsp;The expression are evaluated in order; <em>if any expression is true, the statement associated with it is executed, and this terminates the whole chain</em>. The last <code>else</code> part handles the “none of the above” or default case where none of the other conditions is satisfied.</p>\n</blockquote>\n<p>&emsp;&emsp;Sometimes there is no explicit action for the default; in that case the trailing</p>\n<pre><code class=\"c\">else\n    statement\n</code></pre>\n<p>can be ommitted, it may be used for error checking to <em>catch an “impossible” condition</em>.</p>\n<h3 id=\"3-2-3-switch\"><a href=\"#3-2-3-switch\" class=\"headerlink\" title=\"3.2.3 switch\"></a>3.2.3 switch</h3><p>&emsp;&emsp;The <strong>switch</strong> statement is a multi-way decision that tests whether an expression matches one of a number of constant integer values, and branches accordingly.</p>\n<pre><code class=\"c\">switch (expression)\n&#123;\n    case const-expr: statements\n    case const-expr: statements\n    default: statements\n&#125;\n</code></pre>\n<p>Each <strong>case</strong> is labeled by one or more integer-valued constants or constant expressions.</p>\n<p>If a case matches the expression value, <em>execution <strong>starts</strong> at the case. (All case expressions must be different.)</em></p>\n<p>The case labeled <strong>default</strong> is executed if none of the other cases are satisfied. (A default is optional.)</p>\n<p>If there isn’t a “default” and if none of the cases match, <em>no action at all takes place</em>.</p>\n<p>Cases and the defult clause can occur in any order.</p>\n<h2 id=\"3-3-Loops\"><a href=\"#3-3-Loops\" class=\"headerlink\" title=\"3.3 Loops\"></a>3.3 Loops</h2><h3 id=\"3-3-1-while\"><a href=\"#3-3-1-while\" class=\"headerlink\" title=\"3.3.1 while\"></a>3.3.1 while</h3><h3 id=\"3-3-2-for\"><a href=\"#3-3-2-for\" class=\"headerlink\" title=\"3.3.2 for\"></a>3.3.2 for</h3><h3 id=\"3-3-3-do-while\"><a href=\"#3-3-3-do-while\" class=\"headerlink\" title=\"3.3.3 do-while\"></a>3.3.3 do-while</h3><h2 id=\"3-4-break-and-continue\"><a href=\"#3-4-break-and-continue\" class=\"headerlink\" title=\"3.4 break and continue\"></a>3.4 break and continue</h2><h2 id=\"3-5-goto\"><a href=\"#3-5-goto\" class=\"headerlink\" title=\"3.5 goto\"></a>3.5 goto</h2><h1 id=\"4-Functions-and-program-structure\"><a href=\"#4-Functions-and-program-structure\" class=\"headerlink\" title=\"4 Functions and program structure\"></a>4 Functions and program structure</h1><h2 id=\"4-1-Basics-of-functions\"><a href=\"#4-1-Basics-of-functions\" class=\"headerlink\" title=\"4.1 Basics of functions\"></a>4.1 Basics of functions</h2>","excerpt":"","more":"<h1 id=\"1-Introduction-to-C\"><a href=\"#1-Introduction-to-C\" class=\"headerlink\" title=\"1 Introduction to C\"></a>1 Introduction to C</h1><p>&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. </p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;  //include information about standard library\n\nmain()  //define a funcation named &quot;main&quot;\n&#123;  //statements of &quot;main&quot; are enclosed in braces\n    printf(&quot;hello, world\\n&quot;);\n&#125;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;A C program begins executing at the beginning of <strong>main</strong>. This means that every C program must have a <strong>main</strong> somewhere.</p>\n</blockquote>\n<h1 id=\"2-Types-operators-and-expressions\"><a href=\"#2-Types-operators-and-expressions\" class=\"headerlink\" title=\"2 Types, operators, and expressions\"></a>2 Types, operators, and expressions</h1><h2 id=\"2-1-Variable-names\"><a href=\"#2-1-Variable-names\" class=\"headerlink\" title=\"2.1 Variable names\"></a>2.1 Variable names</h2><p>There are some restrictions on the names of variables and symbolic constants:</p>\n<ul>\n<li>Names are made up of letters and digits; the first character must be a letter. </li>\n<li>The underscore <code>_</code> counts as a letter, it is sometimes useful for <strong>improving the readability of long variable names</strong>. (Don’t begin variable names with underscore, however, since library routines often use such names. )</li>\n<li><strong>Upper case and lower case letters are distinct</strong>, so “x” and “X” are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)</li>\n</ul>\n<h2 id=\"2-2-Data-types-and-sizes\"><a href=\"#2-2-Data-types-and-sizes\" class=\"headerlink\" title=\"2.2 Data types and sizes\"></a>2.2 Data types and sizes</h2><p>There are only a few basic data types in C:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">type</th>\n<th align=\"center\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>char</code></td>\n<td align=\"center\"><strong>A single byte</strong>, capable of holding one character in the local character set.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>int</code></td>\n<td align=\"center\">An integer, <em>typically reflecting the natural size of integers on the host machine</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>float</code></td>\n<td align=\"center\">Single-precision floating point.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>double</code></td>\n<td align=\"center\">Double-precision floating point.</td>\n</tr>\n</tbody></table>\n<p>&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. </p>\n<p><code>short</code> and <code>long</code> apply to integers:</p>\n<pre><code class=\"c\">short int sh;\nlong int counter;\n</code></pre>\n<p>&emsp;&emsp;The word “int” can be omitted in such declarations, and typically is.</p>\n<pre><code class=\"c\">short sh;\nlong counter;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;The intent is that <code>short</code> and <code>long</code> should provide different lengths of integers where practical; <code>int</code> will normally be the natural size for a particular machine.</p>\n</blockquote>\n<p>On a 32-bit machine, <code>short</code> is often 16 bits, <code>long</code> 32 bits, and <code>int</code> either 16 or 32 bits.</p>\n<p>On a 64-bit machine, <code>short</code> is 16 bits, <code>long</code> 64 bits, and <code>int</code> 32 bits.</p>\n<p>…</p>\n<blockquote>\n<p>&emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that <em><code>short</code>s and <code>int</code>s are at least 16 bits, <code>long</code>s are at least 32 bits, and <code>short</code> is no longer than <code>int</code>, which is no longer than <code>long</code></em>.</p>\n</blockquote>\n<h2 id=\"2-3-Constants\"><a href=\"#2-3-Constants\" class=\"headerlink\" title=\"2.3 Constants\"></a>2.3 Constants</h2><p>&emsp;&emsp;An integer constant like <code>1234</code> is an <code>int</code>. A <code>long</code> constant is written with a terminal <code>l</code> or <code>L</code>, as in <code>123456789L</code>; an integer too big to fit into an <code>int</code> will also be taken as a <code>long</code>. The <code>unsigned int</code> constants are written with a terminal <code>u</code> or <code>U</code>, and the suffix <code>ul</code> or <code>UL</code> indicates <code>unsigned long</code>.</p>\n<pre><code class=\"c\">int a = 1234;\nunsigned int ua = 1234u;\n\nlong b = 1234567890L;\nunsigned long ub = 1234567890UL;\n</code></pre>\n<p>The value of an integer <em>can be specified in octal or hexadecimal instead of decimal</em>: A leading <code>0</code> on an integer constant means <strong>octal</strong>; a leading <code>0x</code> or <code>0X</code> means <strong>hexadecimal</strong>.  </p>\n<pre><code class=\"c\">int a = 037;  // 31 in octal\nint b = 0x1F;  // 31 in hexadecimal\n\nprintf(&quot;a(037) = %d\\n&quot;, a);  // a(037) = 31\nprintf(&quot;b(0x1F) = %d\\n&quot;, b);  // b(0x1F) = 31\n</code></pre>\n<p>&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is <code>double</code>, unless suffixed. The suffixes <code>f</code> or <code>F</code> indicate a <code>float</code> constant; <code>l</code> or <code>L</code> indicate a <code>long double</code>.</p>\n<pre><code class=\"c\">double d = 12.34;\nfloat f = 12.34f;\nlong double ld = 12.34L;\n</code></pre>\n<p>&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as <code>&#39;x&#39;</code>. The value of a character constant is the numeric value of the character in the machine’s character set.</p>\n<pre><code class=\"c\">char c = &#39;x&#39;;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;For example, in the ASCII character set the character constant <code>&#39;0&#39;</code> has the value <code>48</code>, which is unrelated to the numeric value <code>0</code>. If we write <code>&#39;0&#39;</code> instead of a numeric value like <code>48</code> that depends on character set, <em>the program is independent of the particular value and easier to read</em>.</p>\n</blockquote>\n<pre><code class=\"c\">char c = &#39;0&#39;;\nint ci = c;  //ci = 48 \n</code></pre>\n<h2 id=\"2-4-Declarations\"><a href=\"#2-4-Declarations\" class=\"headerlink\" title=\"2.4 Declarations\"></a>2.4 Declarations</h2><p>&emsp;&emsp;<em>All variables must be declared before use</em>, although certain declarations can be made implicitly by context.</p>\n<p>A declaration specifies a type, and contains a list of one or more variables of that type, as in:</p>\n<pre><code class=\"c\">int lower, upper, step;\nchar c, line[100];\n</code></pre>\n<p>Variables can be distributed among declarations in any fashion; the lists above could equally well be written as:</p>\n<pre><code class=\"c\">int lower;\nint upper;\nint step;\nchar c;\nchar line[1000];\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.</p>\n</blockquote>\n<p>&emsp;&emsp;A variable may also be initialized in its declaration.</p>\n<p>If the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:</p>\n<pre><code class=\"c\">char esc = &#39;\\\\&#39;;\nint i = 0;\nint limit MAXLINE+1;\nfloat eps = 1.0e-5;\n</code></pre>\n<h2 id=\"2-5-Operators\"><a href=\"#2-5-Operators\" class=\"headerlink\" title=\"2.5 Operators\"></a>2.5 Operators</h2><h3 id=\"2-5-1-Arithmetic-operators\"><a href=\"#2-5-1-Arithmetic-operators\" class=\"headerlink\" title=\"2.5.1 Arithmetic operators\"></a>2.5.1 Arithmetic operators</h3><p>&emsp;&emsp;The C arithmetic operators are the symbols that are used to perform mathematical operations on operands. </p>\n<p>There are <strong>a total of 9 arithmetic operators</strong> in C to provide the basic arithmetic operations such as addition, subtraction, multiplication, etc.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Operator</th>\n<th align=\"center\">Arithmetic Operation</th>\n<th align=\"center\">Syntax</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>+</code></td>\n<td align=\"center\">Add two operands.</td>\n<td align=\"center\"><code>x + y</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>–</code></td>\n<td align=\"center\">Subtract the second operand from the first operand.</td>\n<td align=\"center\"><code>x – y</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">Multiply two operands.</td>\n<td align=\"center\"><code>x * y</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">Divide the first operand by the second operand.</td>\n<td align=\"center\"><code>x / y</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>%</code></td>\n<td align=\"center\">Calculate the remainder when the first operand is divided by the second operand.</td>\n<td align=\"center\"><code>x % y</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>--</code></td>\n<td align=\"center\">Decreases the integer value of the variable by one.</td>\n<td align=\"center\"><code>--h</code> or <code>h--</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>++</code></td>\n<td align=\"center\">Increases the integer value of the variable by one.</td>\n<td align=\"center\"><code>++h</code> or <code>h++</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>+</code></td>\n<td align=\"center\">Returns the value of its operand.</td>\n<td align=\"center\"><code>+h</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">Returns the negative of the value of its operand.</td>\n<td align=\"center\"><code>-h</code></td>\n</tr>\n</tbody></table>\n<pre><code class=\"c\">// C program to demonstrate syntax of arithmetic operators\n#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n    int a = 10, b = 4, res;\n\n    // printing a and b\n    printf(&quot;a is %d and b is %d\\n&quot;, a, b);\n\n    res = a + b; // addition\n    printf(&quot;a + b is %d\\n&quot;, res);\n\n    res = a - b; // subtraction\n    printf(&quot;a - b is %d\\n&quot;, res);\n\n    res = a * b; // multiplication\n    printf(&quot;a * b is %d\\n&quot;, res);\n\n    res = a / b; // division\n    printf(&quot;a / b is %d\\n&quot;, res);\n\n    res = a % b; // modulus\n    printf(&quot;a %% b is %d\\n&quot;, res);\n\n    printf(&quot;Post Increment and Decrement\\n&quot;);\n   \n    // post-increment example:\n    // res is assigned 10 only, a is not updated yet\n    res = a++;\n    printf(&quot;a is %d and result is %d\\n&quot;, a, res); // a becomes 11 now\n    \n    // post-decrement example:\n    // res is assigned 11 only, a is not updated yet\n    res = a--;\n    printf(&quot;a is %d and result is %d\\n&quot;, a, res); // a becomes 10 now\n\n    printf(&quot;\\nPre Increment and Decrement\\n&quot;);\n\n    // pre-increment example:\n    // res is assigned 11 now since a is updated here itself\n    res = ++a;\n    // a and res have same values = 11\n    printf(&quot;a is %d and result is %d\\n&quot;, a, res);\n\n    // pre-decrement example:\n    // res is assigned 10 only since a is updated here itself\n    res = --a;\n    // a and res have same values = 10\n    printf(&quot;a is %d and result is %d\\n&quot;, a, res);\n\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"2-5-2-Assignment-operators\"><a href=\"#2-5-2-Assignment-operators\" class=\"headerlink\" title=\"2.5.2 Assignment operators\"></a>2.5.2 Assignment operators</h3><p>&emsp;&emsp;Assignment operators are used for assigning value to a variable.</p>\n<p>The left side operand of the assignment operator is a variable and right side operand of the assignment operator is a value. </p>\n<p>The value on the right side must be of <strong>the same data-type</strong> of the variable on the left side otherwise the compiler will raise an error. </p>\n<ul>\n<li><code>=</code> is the simplest assignment operator, which is used to assign the value on the right to the variable on the left.</li>\n<li><code>+=</code> is combination of <code>+</code> and <code>=</code> operators and <code>(a += b)</code> can be written as <code>(a = a + b)</code>.</li>\n<li><code>-=</code> is combination of <code>-</code> and <code>=</code> operators and <code>(a -= b)</code> can be written as <code>(a = a - b)</code>.</li>\n<li><code>*=</code> is combination of <code>*</code> and <code>=</code> operators and <code>(a *= b)</code> can be written as <code>(a = a * b)</code>.</li>\n<li><code>/=</code> is combination of <code>/</code> and <code>=</code> operators and <code>(a /= b)</code> can be written as <code>(a = a / b)</code>.</li>\n</ul>\n<pre><code class=\"c\">// C program to demonstrate working of Assignment operators\n\n#include &lt;stdio.h&gt;\n\nint main()\n&#123;\n    // Assigning value 10 to a\n    // using &quot;=&quot; operator\n    int a = 10;\n    printf(&quot;Value of a is %d\\n&quot;, a);\n\n    // Assigning value by adding 10 to a\n    // using &quot;+=&quot; operator\n    a += 10;\n    printf(&quot;Value of a is %d\\n&quot;, a);\n\n    // Assigning value by subtracting 10 from a\n    // using &quot;-=&quot; operator\n    a -= 10;\n    printf(&quot;Value of a is %d\\n&quot;, a);\n\n    // Assigning value by multiplying 10 to a\n    // using &quot;*=&quot; operator\n    a *= 10;\n    printf(&quot;Value of a is %d\\n&quot;, a);\n\n    // Assigning value by dividing 10 from a\n    // using &quot;/=&quot; operator\n    a /= 10;\n    printf(&quot;Value of a is %d\\n&quot;, a);\n\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"2-5-3-Logical-operators\"><a href=\"#2-5-3-Logical-operators\" class=\"headerlink\" title=\"2.5.3 Logical operators\"></a>2.5.3 Logical operators</h3><p>&emsp;&emsp;Logical operators in C are used to combine multiple conditions&#x2F;constraints. <em>Logical Operators returns either 0 or 1, it depends on whether the expression result is <code>true</code> or <code>false</code>.</em></p>\n<p>There are 3 logical operators in the C language:</p>\n<ol>\n<li>Logical AND (<code>&amp;&amp;</code>)</li>\n</ol>\n<pre><code class=\"c\">// C program for Logical\n// AND Operator\n#include &lt;stdio.h&gt;\n\n// Driver code\nint main()\n&#123;\n    int a = 10, b = 20;\n\n    if (a &gt; 0 &amp;&amp; b &gt; 0) \n    &#123;\n        printf(&quot;Both values are greater than 0\\n&quot;);\n    &#125;\n    else \n    &#123;\n        printf(&quot;Both values are less than 0\\n&quot;);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>Logical OR (<code>||</code>)</li>\n</ol>\n<pre><code class=\"c\">// C program for Logical\n// OR Operator\n#include &lt;stdio.h&gt;\n\n// Driver code\nint main()\n&#123;\n    int a = -1, b = 20;\n\n    if (a &gt; 0 || b &gt; 0) \n    &#123;\n        printf(&quot;Any one of the given value is &quot;\n               &quot;greater than 0\\n&quot;);\n    &#125;\n    else \n    &#123;\n        printf(&quot;Both values are less than 0\\n&quot;);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<ol start=\"3\">\n<li>Logical NOT (<code>!</code>)</li>\n</ol>\n<pre><code class=\"c\">// C program for Logical\n// NOT Operator\n#include &lt;stdio.h&gt;\n\n// Driver code\nint main()\n&#123;\n    int a = 10, b = 20;\n\n    if (!(a &gt; 0 &amp;&amp; b &gt; 0)) \n    &#123;\n        // condition returned true but\n        // logical NOT operator changed\n        // it to false\n        printf(&quot;Both values are greater than 0\\n&quot;);\n    &#125; \n    else \n    &#123;\n        printf(&quot;Both values are less than 0\\n&quot;);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<p>&emsp;&emsp;When the result can be determined by evaluating the preceding Logical expression without evaluating the further operands, it is known as <strong>short-circuiting</strong>.</p>\n<h3 id=\"2-5-4-Bitwise-operators\"><a href=\"#2-5-4-Bitwise-operators\" class=\"headerlink\" title=\"2.5.4 Bitwise operators\"></a>2.5.4 Bitwise operators</h3><p>&emsp;&emsp;The following 6 operators are bitwise operators (also known as <strong>bit operators</strong> as they work at the bit-level).  </p>\n<p>They are used to perform bitwise operations in C.</p>\n<pre><code class=\"c\">// C Program to demonstrate use of bitwise operators\n\n#include &lt;stdio.h&gt;\nint main()\n&#123;\n    // a = 5 (00000101 in 8-bit binary), b = 9 (00001001 in\n    // 8-bit binary)\n    unsigned int a = 5, b = 9;\n\n    // The result is 00000001\n    printf(&quot;a = %u, b = %u\\n&quot;, a, b);\n    printf(&quot;a&amp;b = %u\\n&quot;, a &amp; b);\n\n    // The result is 00001101\n    printf(&quot;a|b = %u\\n&quot;, a | b);\n\n    // The result is 00001100\n    printf(&quot;a^b = %u\\n&quot;, a ^ b);\n\n    // The result is 11111111111111111111111111111010\n    // (assuming 32-bit unsigned int)\n    printf(&quot;~a = %u\\n&quot;, a = ~a);\n\n    // The result is 00010010\n    printf(&quot;b&lt;&lt;1 = %u\\n&quot;, b &lt;&lt; 1);\n\n    // The result is 00000100\n    printf(&quot;b&gt;&gt;1 = %u\\n&quot;, b &gt;&gt; 1);\n\n    return 0;\n&#125;\n</code></pre>\n<p><a href=\"https://www.geeksforgeeks.org/assignment-operators-in-c-c/\"> knowledge webpage </a></p>\n<h2 id=\"2-6-Type-conversions\"><a href=\"#2-6-Type-conversions\" class=\"headerlink\" title=\"2.6 Type conversions\"></a>2.6 Type conversions</h2><h2 id=\"2-7-Expressions\"><a href=\"#2-7-Expressions\" class=\"headerlink\" title=\"2.7 Expressions\"></a>2.7 Expressions</h2><h1 id=\"3-Control-flow\"><a href=\"#3-Control-flow\" class=\"headerlink\" title=\"3 Control flow\"></a>3 Control flow</h1><h2 id=\"3-1-Statements-and-blocks\"><a href=\"#3-1-Statements-and-blocks\" class=\"headerlink\" title=\"3.1 Statements and blocks\"></a>3.1 Statements and blocks</h2><p>&emsp;&emsp;An expression such as <code>x = 0</code> or <code>i++</code> or <code>printf(...)</code> becomes a <em>statement</em> when it is followed by a semicolon <code>;</code>, as in</p>\n<pre><code class=\"c\">x = 0;\ni++;\nprintf(...);\n</code></pre>\n<blockquote>\n<p>In C, semicolon is a statement terminator, rather than …</p>\n</blockquote>\n<p>&emsp;&emsp;Curly braces <code>&#123;</code> and <code>&#125;</code> are used to group declarations and statements together into a compound statement, or block, so that <em>they are syntactically equivalent to a single statement</em>.</p>\n<h2 id=\"3-2-Branches\"><a href=\"#3-2-Branches\" class=\"headerlink\" title=\"3.2 Branches\"></a>3.2 Branches</h2><h3 id=\"3-2-1-if-else\"><a href=\"#3-2-1-if-else\" class=\"headerlink\" title=\"3.2.1 if-else\"></a>3.2.1 if-else</h3><p>&emsp;&emsp;The <strong>if-else</strong> statement is used to express decisions. Formally, the syntax is</p>\n<pre><code class=\"c\">if (expression)\n    statement1;\nelse\n    statement2;\n</code></pre>\n<p>where the <code>else</code> part is optional.</p>\n<blockquote>\n<p>&emsp;&emsp;The <em>expression</em> is evaluated, if it is true (<em>that is, if expression has a non-zero value</em>), <strong>statement1</strong> is executed. If it is false (<em>expression is zero</em>) and if there is an <code>else</code> part, <strong>statement2</strong> is executed instead.</p>\n</blockquote>\n<p>&emsp;&emsp;Since an <code>if</code> simply tests the numeric value of an expression, certain coding shortcuts are possible. The most obvious is writing</p>\n<pre><code class=\"c\">if(expression)\n</code></pre>\n<p>instead of </p>\n<pre><code class=\"c\">if(expression != 0)\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;Sometimes this is natural and clear; at other times it can be cryptic.</p>\n</blockquote>\n<hr>\n<p>&emsp;&emsp;Because the else part of an if-else is optional, there is an ambiguit when an else is omitted from a nested if sequence.</p>\n<p>This is resolved by associating the else with closest previous else-if. For example, in</p>\n<pre><code class=\"c\">if (n &gt; 0)\n    if (a &gt; b)\n        z = a;\n    else\n        z = b;\n</code></pre>\n<p>the else goes with the inner if.</p>\n<hr>\n<h3 id=\"3-2-2-else-if\"><a href=\"#3-2-2-else-if\" class=\"headerlink\" title=\"3.2.2 else-if\"></a>3.2.2 else-if</h3><p>&emsp;&emsp;The construction</p>\n<pre><code class=\"c\">if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse if (expression)\n    statement;\nelse\n    statement;\n</code></pre>\n<p>is the most general way of writing a <em>multi-way decision</em>. </p>\n<blockquote>\n<p>&emsp;&emsp;The expression are evaluated in order; <em>if any expression is true, the statement associated with it is executed, and this terminates the whole chain</em>. The last <code>else</code> part handles the “none of the above” or default case where none of the other conditions is satisfied.</p>\n</blockquote>\n<p>&emsp;&emsp;Sometimes there is no explicit action for the default; in that case the trailing</p>\n<pre><code class=\"c\">else\n    statement\n</code></pre>\n<p>can be ommitted, it may be used for error checking to <em>catch an “impossible” condition</em>.</p>\n<h3 id=\"3-2-3-switch\"><a href=\"#3-2-3-switch\" class=\"headerlink\" title=\"3.2.3 switch\"></a>3.2.3 switch</h3><p>&emsp;&emsp;The <strong>switch</strong> statement is a multi-way decision that tests whether an expression matches one of a number of constant integer values, and branches accordingly.</p>\n<pre><code class=\"c\">switch (expression)\n&#123;\n    case const-expr: statements\n    case const-expr: statements\n    default: statements\n&#125;\n</code></pre>\n<p>Each <strong>case</strong> is labeled by one or more integer-valued constants or constant expressions.</p>\n<p>If a case matches the expression value, <em>execution <strong>starts</strong> at the case. (All case expressions must be different.)</em></p>\n<p>The case labeled <strong>default</strong> is executed if none of the other cases are satisfied. (A default is optional.)</p>\n<p>If there isn’t a “default” and if none of the cases match, <em>no action at all takes place</em>.</p>\n<p>Cases and the defult clause can occur in any order.</p>\n<h2 id=\"3-3-Loops\"><a href=\"#3-3-Loops\" class=\"headerlink\" title=\"3.3 Loops\"></a>3.3 Loops</h2><h3 id=\"3-3-1-while\"><a href=\"#3-3-1-while\" class=\"headerlink\" title=\"3.3.1 while\"></a>3.3.1 while</h3><h3 id=\"3-3-2-for\"><a href=\"#3-3-2-for\" class=\"headerlink\" title=\"3.3.2 for\"></a>3.3.2 for</h3><h3 id=\"3-3-3-do-while\"><a href=\"#3-3-3-do-while\" class=\"headerlink\" title=\"3.3.3 do-while\"></a>3.3.3 do-while</h3><h2 id=\"3-4-break-and-continue\"><a href=\"#3-4-break-and-continue\" class=\"headerlink\" title=\"3.4 break and continue\"></a>3.4 break and continue</h2><h2 id=\"3-5-goto\"><a href=\"#3-5-goto\" class=\"headerlink\" title=\"3.5 goto\"></a>3.5 goto</h2><h1 id=\"4-Functions-and-program-structure\"><a href=\"#4-Functions-and-program-structure\" class=\"headerlink\" title=\"4 Functions and program structure\"></a>4 Functions and program structure</h1><h2 id=\"4-1-Basics-of-functions\"><a href=\"#4-1-Basics-of-functions\" class=\"headerlink\" title=\"4.1 Basics of functions\"></a>4.1 Basics of functions</h2>"},{"title":"CSS","date":"2025-01-13T09:13:47.000Z","_content":"\n# 1 Getting started with CSS\n\n## 1.1 What is CSS?\n\n&emsp;&emsp;CSS (Cascading Style Sheets) is used to style and lay out web pages.\n\n## 1.2 Adding CSS to the document\n\nThere are three different ways to apply CSS to an HTML document.\n\n### External stylesheets\n\n```css\n/*styles.css*/\nh1 {\n    color: red;\n}\n```\n\nTo link styles.css to index.html, add the following line somewhere inside the `<head>` of the HTML document:\n\n```html\n<link rel=\"stylesheet\" href=\"styles.css\" />\n```\n\n### Internal stylesheets\n\nInternal stylesheets are contained within `<style>` elements, which go inside the HTML `<head>`.\n\n```html\n<style>\n    p {\n        color: purple;\n    }\n</style>\n```\n\n### Inline styles\n\nInline styles are CSS declarations that *affect a single HTML element*, contained within a style attribute.\n\nAdd a `style` attribute to the element to specify its style.\n\n```html\n<span style=\"color: purple; font-weight: bold\">span element</span>\n```\n\n> **Avoid using CSS in this way if possible.** It is a bad practice.\n\n## 1.3 Selectors\n\nA CSS selector is a pattern of elements and other terms that tell the browser *which HTML elements should be selected to have the CSS property values inside the rule applied to them*.\n\nThe element or elements which are selected by the selector are referred to as the subject of the selector.\n\n```html\n<body>\n    <h1 class=\"heading\">Selectors</h1>\n    <p id=\"one\">\n        Veggies es bonus vobis, proinde vos postulo essum magis\n        <span class=\"highlight first-para\">kohlrabi welsh onion</span> daikon amaranth tatsoi tomatillo melon azuki\n        bean garlic.\n    </p>\n\n    <p class=\"highlight\">\n        Gumbo beet greens corn soko <strong>endive</strong> gumbo gourd. Parsley\n        shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra\n        wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.\n    </p>\n\n    <p>\n        Turnip greens yarrow ricebean rutabaga <em>endive cauliflower</em> sea lettuce\n        kohlrabi amaranth water spinach avocado daikon napa cabbage asparagus winter\n        purslane kale. Celery potato scallion desert raisin horseradish spinach\n    </p>\n</body>\n```\n\n### 1.3.1 Type selectors\n\nA type selector is sometimes referred to as a *tag name selector* or *element selector* because it selects an HTML tag/element in the document.\n\n```css\nbody {\n    font-family: sans-serif;\n}\n\nspan {\n    background-color: yellow;\n}\n\nstrong {\n    color: rebeccapurple;\n}\n\nem {\n    color: rebeccapurple;\n}\n```\n\n### 1.3.2 Class selectors\n\nThe case-sensitive class selector starts with a dot `.` character. It will select everything in the document with that class applied to it.\n\n```css\nbody {\n    font-family: sans-serif;\n}\n\n.highlight {\n    background-color: yellow;\n}\n```\n\n### 1.3.3 ID selectors\n\nThe case-sensitive ID selector begins with a `#` rather than a dot character, but is used in the same way as a class selector. The difference is that an ID can be used only once per page, and elements can only have a single id value applied to them.\n\n```css\nbody {\n  font-family: sans-serif;\n}\n\n#one {\n  background-color: yellow;\n}\n\nh1#heading {\n  color: rebeccapurple;\n}\n```\n\n### 1.3.4 Attribute selectors\n\n## 1.4 Combinators\n\n## 1.5 The box model\n\n# 2 Text styling\n\n# 3 Layout\n\n\n","source":"_posts/frontend-css.md","raw":"---\ntitle: CSS\ndate: 2025-01-13 17:13:47\ncategories:\n- Frontend\ntags:\n---\n\n# 1 Getting started with CSS\n\n## 1.1 What is CSS?\n\n&emsp;&emsp;CSS (Cascading Style Sheets) is used to style and lay out web pages.\n\n## 1.2 Adding CSS to the document\n\nThere are three different ways to apply CSS to an HTML document.\n\n### External stylesheets\n\n```css\n/*styles.css*/\nh1 {\n    color: red;\n}\n```\n\nTo link styles.css to index.html, add the following line somewhere inside the `<head>` of the HTML document:\n\n```html\n<link rel=\"stylesheet\" href=\"styles.css\" />\n```\n\n### Internal stylesheets\n\nInternal stylesheets are contained within `<style>` elements, which go inside the HTML `<head>`.\n\n```html\n<style>\n    p {\n        color: purple;\n    }\n</style>\n```\n\n### Inline styles\n\nInline styles are CSS declarations that *affect a single HTML element*, contained within a style attribute.\n\nAdd a `style` attribute to the element to specify its style.\n\n```html\n<span style=\"color: purple; font-weight: bold\">span element</span>\n```\n\n> **Avoid using CSS in this way if possible.** It is a bad practice.\n\n## 1.3 Selectors\n\nA CSS selector is a pattern of elements and other terms that tell the browser *which HTML elements should be selected to have the CSS property values inside the rule applied to them*.\n\nThe element or elements which are selected by the selector are referred to as the subject of the selector.\n\n```html\n<body>\n    <h1 class=\"heading\">Selectors</h1>\n    <p id=\"one\">\n        Veggies es bonus vobis, proinde vos postulo essum magis\n        <span class=\"highlight first-para\">kohlrabi welsh onion</span> daikon amaranth tatsoi tomatillo melon azuki\n        bean garlic.\n    </p>\n\n    <p class=\"highlight\">\n        Gumbo beet greens corn soko <strong>endive</strong> gumbo gourd. Parsley\n        shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra\n        wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.\n    </p>\n\n    <p>\n        Turnip greens yarrow ricebean rutabaga <em>endive cauliflower</em> sea lettuce\n        kohlrabi amaranth water spinach avocado daikon napa cabbage asparagus winter\n        purslane kale. Celery potato scallion desert raisin horseradish spinach\n    </p>\n</body>\n```\n\n### 1.3.1 Type selectors\n\nA type selector is sometimes referred to as a *tag name selector* or *element selector* because it selects an HTML tag/element in the document.\n\n```css\nbody {\n    font-family: sans-serif;\n}\n\nspan {\n    background-color: yellow;\n}\n\nstrong {\n    color: rebeccapurple;\n}\n\nem {\n    color: rebeccapurple;\n}\n```\n\n### 1.3.2 Class selectors\n\nThe case-sensitive class selector starts with a dot `.` character. It will select everything in the document with that class applied to it.\n\n```css\nbody {\n    font-family: sans-serif;\n}\n\n.highlight {\n    background-color: yellow;\n}\n```\n\n### 1.3.3 ID selectors\n\nThe case-sensitive ID selector begins with a `#` rather than a dot character, but is used in the same way as a class selector. The difference is that an ID can be used only once per page, and elements can only have a single id value applied to them.\n\n```css\nbody {\n  font-family: sans-serif;\n}\n\n#one {\n  background-color: yellow;\n}\n\nh1#heading {\n  color: rebeccapurple;\n}\n```\n\n### 1.3.4 Attribute selectors\n\n## 1.4 Combinators\n\n## 1.5 The box model\n\n# 2 Text styling\n\n# 3 Layout\n\n\n","slug":"frontend-css","published":1,"updated":"2025-02-14T15:35:11.079Z","_id":"cm626nnh60005osij2kbmf3d6","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"1-Getting-started-with-CSS\"><a href=\"#1-Getting-started-with-CSS\" class=\"headerlink\" title=\"1 Getting started with CSS\"></a>1 Getting started with CSS</h1><h2 id=\"1-1-What-is-CSS\"><a href=\"#1-1-What-is-CSS\" class=\"headerlink\" title=\"1.1 What is CSS?\"></a>1.1 What is CSS?</h2><p>&emsp;&emsp;CSS (Cascading Style Sheets) is used to style and lay out web pages.</p>\n<h2 id=\"1-2-Adding-CSS-to-the-document\"><a href=\"#1-2-Adding-CSS-to-the-document\" class=\"headerlink\" title=\"1.2 Adding CSS to the document\"></a>1.2 Adding CSS to the document</h2><p>There are three different ways to apply CSS to an HTML document.</p>\n<h3 id=\"External-stylesheets\"><a href=\"#External-stylesheets\" class=\"headerlink\" title=\"External stylesheets\"></a>External stylesheets</h3><pre><code class=\"css\">/*styles.css*/\nh1 &#123;\n    color: red;\n&#125;\n</code></pre>\n<p>To link styles.css to index.html, add the following line somewhere inside the <code>&lt;head&gt;</code> of the HTML document:</p>\n<pre><code class=\"html\">&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot; /&gt;\n</code></pre>\n<h3 id=\"Internal-stylesheets\"><a href=\"#Internal-stylesheets\" class=\"headerlink\" title=\"Internal stylesheets\"></a>Internal stylesheets</h3><p>Internal stylesheets are contained within <code>&lt;style&gt;</code> elements, which go inside the HTML <code>&lt;head&gt;</code>.</p>\n<pre><code class=\"html\">&lt;style&gt;\n    p &#123;\n        color: purple;\n    &#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"Inline-styles\"><a href=\"#Inline-styles\" class=\"headerlink\" title=\"Inline styles\"></a>Inline styles</h3><p>Inline styles are CSS declarations that <em>affect a single HTML element</em>, contained within a style attribute.</p>\n<p>Add a <code>style</code> attribute to the element to specify its style.</p>\n<pre><code class=\"html\">&lt;span style=&quot;color: purple; font-weight: bold&quot;&gt;span element&lt;/span&gt;\n</code></pre>\n<blockquote>\n<p><strong>Avoid using CSS in this way if possible.</strong> It is a bad practice.</p>\n</blockquote>\n<h2 id=\"1-3-Selectors\"><a href=\"#1-3-Selectors\" class=\"headerlink\" title=\"1.3 Selectors\"></a>1.3 Selectors</h2><p>A CSS selector is a pattern of elements and other terms that tell the browser <em>which HTML elements should be selected to have the CSS property values inside the rule applied to them</em>.</p>\n<p>The element or elements which are selected by the selector are referred to as the subject of the selector.</p>\n<pre><code class=\"html\">&lt;body&gt;\n    &lt;h1 class=&quot;heading&quot;&gt;Selectors&lt;/h1&gt;\n    &lt;p id=&quot;one&quot;&gt;\n        Veggies es bonus vobis, proinde vos postulo essum magis\n        &lt;span class=&quot;highlight first-para&quot;&gt;kohlrabi welsh onion&lt;/span&gt; daikon amaranth tatsoi tomatillo melon azuki\n        bean garlic.\n    &lt;/p&gt;\n\n    &lt;p class=&quot;highlight&quot;&gt;\n        Gumbo beet greens corn soko &lt;strong&gt;endive&lt;/strong&gt; gumbo gourd. Parsley\n        shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra\n        wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        Turnip greens yarrow ricebean rutabaga &lt;em&gt;endive cauliflower&lt;/em&gt; sea lettuce\n        kohlrabi amaranth water spinach avocado daikon napa cabbage asparagus winter\n        purslane kale. Celery potato scallion desert raisin horseradish spinach\n    &lt;/p&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"1-3-1-Type-selectors\"><a href=\"#1-3-1-Type-selectors\" class=\"headerlink\" title=\"1.3.1 Type selectors\"></a>1.3.1 Type selectors</h3><p>A type selector is sometimes referred to as a <em>tag name selector</em> or <em>element selector</em> because it selects an HTML tag&#x2F;element in the document.</p>\n<pre><code class=\"css\">body &#123;\n    font-family: sans-serif;\n&#125;\n\nspan &#123;\n    background-color: yellow;\n&#125;\n\nstrong &#123;\n    color: rebeccapurple;\n&#125;\n\nem &#123;\n    color: rebeccapurple;\n&#125;\n</code></pre>\n<h3 id=\"1-3-2-Class-selectors\"><a href=\"#1-3-2-Class-selectors\" class=\"headerlink\" title=\"1.3.2 Class selectors\"></a>1.3.2 Class selectors</h3><p>The case-sensitive class selector starts with a dot <code>.</code> character. It will select everything in the document with that class applied to it.</p>\n<pre><code class=\"css\">body &#123;\n    font-family: sans-serif;\n&#125;\n\n.highlight &#123;\n    background-color: yellow;\n&#125;\n</code></pre>\n<h3 id=\"1-3-3-ID-selectors\"><a href=\"#1-3-3-ID-selectors\" class=\"headerlink\" title=\"1.3.3 ID selectors\"></a>1.3.3 ID selectors</h3><p>The case-sensitive ID selector begins with a <code>#</code> rather than a dot character, but is used in the same way as a class selector. The difference is that an ID can be used only once per page, and elements can only have a single id value applied to them.</p>\n<pre><code class=\"css\">body &#123;\n  font-family: sans-serif;\n&#125;\n\n#one &#123;\n  background-color: yellow;\n&#125;\n\nh1#heading &#123;\n  color: rebeccapurple;\n&#125;\n</code></pre>\n<h3 id=\"1-3-4-Attribute-selectors\"><a href=\"#1-3-4-Attribute-selectors\" class=\"headerlink\" title=\"1.3.4 Attribute selectors\"></a>1.3.4 Attribute selectors</h3><h2 id=\"1-4-Combinators\"><a href=\"#1-4-Combinators\" class=\"headerlink\" title=\"1.4 Combinators\"></a>1.4 Combinators</h2><h2 id=\"1-5-The-box-model\"><a href=\"#1-5-The-box-model\" class=\"headerlink\" title=\"1.5 The box model\"></a>1.5 The box model</h2><h1 id=\"2-Text-styling\"><a href=\"#2-Text-styling\" class=\"headerlink\" title=\"2 Text styling\"></a>2 Text styling</h1><h1 id=\"3-Layout\"><a href=\"#3-Layout\" class=\"headerlink\" title=\"3 Layout\"></a>3 Layout</h1>","excerpt":"","more":"<h1 id=\"1-Getting-started-with-CSS\"><a href=\"#1-Getting-started-with-CSS\" class=\"headerlink\" title=\"1 Getting started with CSS\"></a>1 Getting started with CSS</h1><h2 id=\"1-1-What-is-CSS\"><a href=\"#1-1-What-is-CSS\" class=\"headerlink\" title=\"1.1 What is CSS?\"></a>1.1 What is CSS?</h2><p>&emsp;&emsp;CSS (Cascading Style Sheets) is used to style and lay out web pages.</p>\n<h2 id=\"1-2-Adding-CSS-to-the-document\"><a href=\"#1-2-Adding-CSS-to-the-document\" class=\"headerlink\" title=\"1.2 Adding CSS to the document\"></a>1.2 Adding CSS to the document</h2><p>There are three different ways to apply CSS to an HTML document.</p>\n<h3 id=\"External-stylesheets\"><a href=\"#External-stylesheets\" class=\"headerlink\" title=\"External stylesheets\"></a>External stylesheets</h3><pre><code class=\"css\">/*styles.css*/\nh1 &#123;\n    color: red;\n&#125;\n</code></pre>\n<p>To link styles.css to index.html, add the following line somewhere inside the <code>&lt;head&gt;</code> of the HTML document:</p>\n<pre><code class=\"html\">&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot; /&gt;\n</code></pre>\n<h3 id=\"Internal-stylesheets\"><a href=\"#Internal-stylesheets\" class=\"headerlink\" title=\"Internal stylesheets\"></a>Internal stylesheets</h3><p>Internal stylesheets are contained within <code>&lt;style&gt;</code> elements, which go inside the HTML <code>&lt;head&gt;</code>.</p>\n<pre><code class=\"html\">&lt;style&gt;\n    p &#123;\n        color: purple;\n    &#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"Inline-styles\"><a href=\"#Inline-styles\" class=\"headerlink\" title=\"Inline styles\"></a>Inline styles</h3><p>Inline styles are CSS declarations that <em>affect a single HTML element</em>, contained within a style attribute.</p>\n<p>Add a <code>style</code> attribute to the element to specify its style.</p>\n<pre><code class=\"html\">&lt;span style=&quot;color: purple; font-weight: bold&quot;&gt;span element&lt;/span&gt;\n</code></pre>\n<blockquote>\n<p><strong>Avoid using CSS in this way if possible.</strong> It is a bad practice.</p>\n</blockquote>\n<h2 id=\"1-3-Selectors\"><a href=\"#1-3-Selectors\" class=\"headerlink\" title=\"1.3 Selectors\"></a>1.3 Selectors</h2><p>A CSS selector is a pattern of elements and other terms that tell the browser <em>which HTML elements should be selected to have the CSS property values inside the rule applied to them</em>.</p>\n<p>The element or elements which are selected by the selector are referred to as the subject of the selector.</p>\n<pre><code class=\"html\">&lt;body&gt;\n    &lt;h1 class=&quot;heading&quot;&gt;Selectors&lt;/h1&gt;\n    &lt;p id=&quot;one&quot;&gt;\n        Veggies es bonus vobis, proinde vos postulo essum magis\n        &lt;span class=&quot;highlight first-para&quot;&gt;kohlrabi welsh onion&lt;/span&gt; daikon amaranth tatsoi tomatillo melon azuki\n        bean garlic.\n    &lt;/p&gt;\n\n    &lt;p class=&quot;highlight&quot;&gt;\n        Gumbo beet greens corn soko &lt;strong&gt;endive&lt;/strong&gt; gumbo gourd. Parsley\n        shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra\n        wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        Turnip greens yarrow ricebean rutabaga &lt;em&gt;endive cauliflower&lt;/em&gt; sea lettuce\n        kohlrabi amaranth water spinach avocado daikon napa cabbage asparagus winter\n        purslane kale. Celery potato scallion desert raisin horseradish spinach\n    &lt;/p&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"1-3-1-Type-selectors\"><a href=\"#1-3-1-Type-selectors\" class=\"headerlink\" title=\"1.3.1 Type selectors\"></a>1.3.1 Type selectors</h3><p>A type selector is sometimes referred to as a <em>tag name selector</em> or <em>element selector</em> because it selects an HTML tag&#x2F;element in the document.</p>\n<pre><code class=\"css\">body &#123;\n    font-family: sans-serif;\n&#125;\n\nspan &#123;\n    background-color: yellow;\n&#125;\n\nstrong &#123;\n    color: rebeccapurple;\n&#125;\n\nem &#123;\n    color: rebeccapurple;\n&#125;\n</code></pre>\n<h3 id=\"1-3-2-Class-selectors\"><a href=\"#1-3-2-Class-selectors\" class=\"headerlink\" title=\"1.3.2 Class selectors\"></a>1.3.2 Class selectors</h3><p>The case-sensitive class selector starts with a dot <code>.</code> character. It will select everything in the document with that class applied to it.</p>\n<pre><code class=\"css\">body &#123;\n    font-family: sans-serif;\n&#125;\n\n.highlight &#123;\n    background-color: yellow;\n&#125;\n</code></pre>\n<h3 id=\"1-3-3-ID-selectors\"><a href=\"#1-3-3-ID-selectors\" class=\"headerlink\" title=\"1.3.3 ID selectors\"></a>1.3.3 ID selectors</h3><p>The case-sensitive ID selector begins with a <code>#</code> rather than a dot character, but is used in the same way as a class selector. The difference is that an ID can be used only once per page, and elements can only have a single id value applied to them.</p>\n<pre><code class=\"css\">body &#123;\n  font-family: sans-serif;\n&#125;\n\n#one &#123;\n  background-color: yellow;\n&#125;\n\nh1#heading &#123;\n  color: rebeccapurple;\n&#125;\n</code></pre>\n<h3 id=\"1-3-4-Attribute-selectors\"><a href=\"#1-3-4-Attribute-selectors\" class=\"headerlink\" title=\"1.3.4 Attribute selectors\"></a>1.3.4 Attribute selectors</h3><h2 id=\"1-4-Combinators\"><a href=\"#1-4-Combinators\" class=\"headerlink\" title=\"1.4 Combinators\"></a>1.4 Combinators</h2><h2 id=\"1-5-The-box-model\"><a href=\"#1-5-The-box-model\" class=\"headerlink\" title=\"1.5 The box model\"></a>1.5 The box model</h2><h1 id=\"2-Text-styling\"><a href=\"#2-Text-styling\" class=\"headerlink\" title=\"2 Text styling\"></a>2 Text styling</h1><h1 id=\"3-Layout\"><a href=\"#3-Layout\" class=\"headerlink\" title=\"3 Layout\"></a>3 Layout</h1>"},{"title":"HTML","date":"2025-01-13T09:10:46.000Z","_content":"\n# 1 Getting started with HTML\n\n## 1.1 What is HTML?\n\n&emsp;&emsp;HTML (HyperText Markup Language) is the code that is used to structure a web page and its content.\n\n## 1.2 \n\n## 1.3 Including special characters in HTML\n\n| Literal character | Character reference equivalent |\n|:-----------------:|:------------------------------:|\n| <                 | `&lt;`                         |\n| >                 | `&gt;`                         |\n| \"                 | `&quot;`                       |\n| '                 | `&apos;`                       |\n| &                 | `&amp;`                        |\n\n## 1.4 HTML comments\n\n&emsp;&emsp;HTML has a mechanism to write comments in the code. Browsers ignore comments, effectively making comments invisible to the user.\n\n```html\n<p>I'm not inside a comment</p>\n<!-- <p>I am!</p> -->\n```\n\n# 2 What's in the head?\n\n```html\n<!doctype html>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>My test page</title>\n        <style></style>  <!-- Internal stylesheet -->\n        <script></script>  <!-- Internal JavaScript codes -->\n        <link src=\"path_to_file\"/>  <!-- External stylesheet or JavaScript  -->\n    </head>\n    <body>\n        <p>This is my page</p>\n    </body>\n</html>\n```\n\n# 3 Headings and paragraphs\n\nIn HTML, each paragraph has to be wrapped in a `<p>` element, like so:\n\n```html\n<p>I am a paragraph, oh yes I am.</p>\n```\n\nEach heading has to be wrapped in a heading element:\n\n```html\n<h1>I am the title of the story.</h1>\n```\n\n> There are six heading elements: h1, h2, h3, h4, h5, and h6. Each element represents a different level of content in the document.\n\n# 4 Emphasis and importance\n\n## 4.1 Emphasis and importance\n\n```html\n<p>I am <em>glad</em> you weren't <em>late</em>.</p>\n<p>This liquid is <strong>highly toxic</strong>.</p>\n<p>I am counting on you. <strong>Do not</strong> be late!</p>\n<p>This liquid is <strong>highly toxic</strong> — if you drink it, <strong>you may <em>die</em></strong>.</p>\n```\n\n## 4.2 Italic, bold, underline…\n\n```html\n<!-- scientific names -->\n<p>\n    The Ruby-throated Hummingbird (<i>Archilochus colubris</i>) is the most common\n    hummingbird in Eastern North America.\n</p>\n\n<!-- foreign words -->\n<p>\n    The menu was a sea of exotic words like <i lang=\"uk-latn\">vatrushka</i>,\n    <i lang=\"id\">nasi goreng</i> and <i lang=\"fr\">soupe à l'oignon</i>.\n</p>\n\n<!-- a known misspelling -->\n<p>Someday I'll learn how to <u class=\"spelling-error\">spel</u> better.</p>\n\n<!-- term being defined when used in a definition -->\n<dl>\n    <dt>Semantic HTML</dt>\n    <dd>\n        Use the elements based on their <b>semantic</b> meaning, not their\n        appearance.\n    </dd>\n</dl>\n```\n\n# 5 Lists\n\n## 5.1 Unordered lists\n\n```html\n<ul>\n    <li>milk</li>\n    <li>eggs</li>\n    <li>bread</li>\n    <li>hummus</li>\n</ul>\n```\n\n## 5.2 Ordered lists\n\n```html\n<ol>\n    <li>Drive to the end of the road</li>\n    <li>Turn right</li>\n    <li>Go straight across the first two roundabouts</li>\n    <li>Turn left at the third roundabout</li>\n    <li>The school is on your right, 300 meters up the road</li>\n</ol>\n```\n\n## 5.3 Nesting lists\n\nIt is **perfectly OK** to nest one list inside another one.\n\n```html\n<ol>\n    <li>Remove the skin from the garlic, and chop coarsely.</li>\n    <li>Remove all the seeds and stalk from the pepper, and chop coarsely.</li>\n    <li>Add all the ingredients into a food processor.</li>\n    <li>\n        Process all the ingredients into a paste.\n        <ul>\n            <li>If you want a coarse \"chunky\" hummus, process it for a short time.</li>\n            <li>If you want a smooth hummus, process it for a longer time.</li>\n        </ul>\n    </li>\n</ol>\n```\n\n## 5.4 Description lists\n\nThe purpose of description lists is to *mark up a set of items and their associated descriptions*, such as terms and definitions, or questions and answers.\n\n```html\n<dl>\n    <dt>soliloquy</dt>\n    <dd>\n        In drama, where a character speaks to themselves, representing their inner\n        thoughts or feelings and in the process relaying them to the audience (but\n        not to other characters.)\n    </dd>\n    <dt>monologue</dt>\n    <dd>\n        In drama, where a character speaks their thoughts out loud to share them\n        with the audience and any other characters present.\n    </dd>\n    <dt>aside</dt>\n    <dd>\n        In drama, where a character shares a comment only with the audience for\n        humorous or dramatic effect. This is usually a feeling, thought, or piece of\n        additional background information.\n    </dd>\n</dl>\n```\n\n# 6 Structuring documents\n\n## 6.1 An example\n\nA \"typical website\" could be structured something like this:\n\n<img src=\"/images/webpage-structure-sample.png\"/>\n\n```html\n<!doctype html>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>My page title</title>\n        <link href=\"https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One\" rel=\"stylesheet\" />\n        <link rel=\"stylesheet\" href=\"style.css\" />\n    </head>\n    <body>\n    \n        <!-- The main header used across all the pages of our website -->\n        <header>\n          <h1>Header</h1>\n        </header>\n\n        <!-- navigation bar -->\n        <nav>\n            <ul>\n                <li><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">Our team</a></li>\n                <li><a href=\"#\">Projects</a></li>\n                <li><a href=\"#\">Contact</a></li>\n            </ul>\n\n            <!-- A Search form: another common non-linear way to navigate through a site. -->\n            <form>\n                <input type=\"search\" name=\"q\" placeholder=\"Search query\" />\n                <input type=\"submit\" value=\"Go!\" />\n            </form>\n        </nav>\n\n        <!-- Our page's main content -->\n        <main>\n            <!-- An article -->\n            <article>\n                <h2>Article heading</h2>\n                <p>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam\n                    lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam\n                    viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent\n                    et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt\n                    congue enim, ut porta lorem lacinia consectetur.\n                </p>\n                <section>\n                    <h3>Subsection</h3>\n\n                    <p>\n                        Donec ut librero sed accu vehicula ultricies a non tortor. Lorem\n                        ipsum dolor sit amet, consectetur adipisicing elit. Aenean ut\n                        gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id\n                        dolor.\n                    </p>\n\n                    <p>\n                        Pelientesque auctor nisi id magna consequat sagittis. Curabitur\n                        dapibus, enim sit amet elit pharetra tincidunt feugiat nist\n                        imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed\n                        odio eros.\n                    </p>\n                </section>\n\n                <section>\n                    <h3>Another subsection</h3>\n\n                    <p>\n                        Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum\n                        soclis natoque penatibus et manis dis parturient montes, nascetur\n                        ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at\n                        sem facilisis semper ac in est.\n                    </p>\n\n                    <p>\n                        Vivamus fermentum semper porta. Nunc diam velit, adipscing ut\n                        tristique vitae sagittis vel odio. Maecenas convallis ullamcorper\n                        ultricied. Curabitur ornare, ligula semper consectetur sagittis,\n                        nisi diam iaculis velit, is fringille sem nunc vet mi.\n                    </p>\n                </section>\n            </article>\n\n            <!-- the aside content can also be nested within the main content -->\n            <aside>\n                <h2>Related</h2>\n                <ul>\n                    <li><a href=\"#\">Oh I do like to be beside the seaside</a></li>\n                    <li><a href=\"#\">Oh I do like to be beside the sea</a></li>\n                    <li><a href=\"#\">Although in the North of England</a></li>\n                    <li><a href=\"#\">It never stops raining</a></li>\n                    <li><a href=\"#\">Oh well…</a></li>\n                </ul>\n            </aside>\n        </main>\n\n        <!-- The footer that is used across all the pages of our website -->\n        <footer>\n            <p>©Copyright 2050 by nobody. All rights reversed.</p>\n        </footer>\n    </body>\n</html>\n```\n\n> The appearance of the page shown above — including the layout, colors, and fonts — is achieved by applying CSS to the HTML.\n\n## 6.2 Non-semantic wrappers\n\nSometimes we'll come across a situation where *we can't find an ideal semantic element to group some items together or wrap some content*.\n\nSometimes we might want to just group a set of elements together to affect them all as a single entity with some **CSS** or **JavaScript**.\n\nFor cases like these, **HTML** provides the `<div>` and `<span>` elements.\n\n> We should use these elements preferably with a **suitable class attribute**, to provide some kind of label for them so they can be easily targeted.\n\n`<span>` is an inline non-semantic element.\n\n```html\n<p>\n    The King walked drunkenly back to his room at 01:00, the beer doing nothing to\n    aid him as he staggered through the door.\n    <span class=\"editor-note\">\n        [Editor's note: At this point in the play, the lights should be down low].\n    </span>\n</p>\n```\n\n`<div>` is a block level non-semantic element.\n\n```html\n<div class=\"shopping-cart\">\n    <h2>Shopping cart</h2>\n    <ul>\n        <li>\n            <p>\n                <a href=\"\"><strong>Silver earrings</strong></a>: $99.95.\n            </p>\n            <img src=\"../products/3333-0985/thumb.png\" alt=\"Silver earrings\" />\n        </li>\n        <li>…</li>\n    </ul>\n    <p>Total cost: $237.89</p>\n</div>\n```\n\n## 6.3 Line breaks and horizontal rules\n\n# 7 Advanced text features\n\n\n\n","source":"_posts/frontend-html.md","raw":"---\ntitle: HTML\ndate: 2025-01-13 17:10:46\ncategories:\n- Frontend\ntags:\n---\n\n# 1 Getting started with HTML\n\n## 1.1 What is HTML?\n\n&emsp;&emsp;HTML (HyperText Markup Language) is the code that is used to structure a web page and its content.\n\n## 1.2 \n\n## 1.3 Including special characters in HTML\n\n| Literal character | Character reference equivalent |\n|:-----------------:|:------------------------------:|\n| <                 | `&lt;`                         |\n| >                 | `&gt;`                         |\n| \"                 | `&quot;`                       |\n| '                 | `&apos;`                       |\n| &                 | `&amp;`                        |\n\n## 1.4 HTML comments\n\n&emsp;&emsp;HTML has a mechanism to write comments in the code. Browsers ignore comments, effectively making comments invisible to the user.\n\n```html\n<p>I'm not inside a comment</p>\n<!-- <p>I am!</p> -->\n```\n\n# 2 What's in the head?\n\n```html\n<!doctype html>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>My test page</title>\n        <style></style>  <!-- Internal stylesheet -->\n        <script></script>  <!-- Internal JavaScript codes -->\n        <link src=\"path_to_file\"/>  <!-- External stylesheet or JavaScript  -->\n    </head>\n    <body>\n        <p>This is my page</p>\n    </body>\n</html>\n```\n\n# 3 Headings and paragraphs\n\nIn HTML, each paragraph has to be wrapped in a `<p>` element, like so:\n\n```html\n<p>I am a paragraph, oh yes I am.</p>\n```\n\nEach heading has to be wrapped in a heading element:\n\n```html\n<h1>I am the title of the story.</h1>\n```\n\n> There are six heading elements: h1, h2, h3, h4, h5, and h6. Each element represents a different level of content in the document.\n\n# 4 Emphasis and importance\n\n## 4.1 Emphasis and importance\n\n```html\n<p>I am <em>glad</em> you weren't <em>late</em>.</p>\n<p>This liquid is <strong>highly toxic</strong>.</p>\n<p>I am counting on you. <strong>Do not</strong> be late!</p>\n<p>This liquid is <strong>highly toxic</strong> — if you drink it, <strong>you may <em>die</em></strong>.</p>\n```\n\n## 4.2 Italic, bold, underline…\n\n```html\n<!-- scientific names -->\n<p>\n    The Ruby-throated Hummingbird (<i>Archilochus colubris</i>) is the most common\n    hummingbird in Eastern North America.\n</p>\n\n<!-- foreign words -->\n<p>\n    The menu was a sea of exotic words like <i lang=\"uk-latn\">vatrushka</i>,\n    <i lang=\"id\">nasi goreng</i> and <i lang=\"fr\">soupe à l'oignon</i>.\n</p>\n\n<!-- a known misspelling -->\n<p>Someday I'll learn how to <u class=\"spelling-error\">spel</u> better.</p>\n\n<!-- term being defined when used in a definition -->\n<dl>\n    <dt>Semantic HTML</dt>\n    <dd>\n        Use the elements based on their <b>semantic</b> meaning, not their\n        appearance.\n    </dd>\n</dl>\n```\n\n# 5 Lists\n\n## 5.1 Unordered lists\n\n```html\n<ul>\n    <li>milk</li>\n    <li>eggs</li>\n    <li>bread</li>\n    <li>hummus</li>\n</ul>\n```\n\n## 5.2 Ordered lists\n\n```html\n<ol>\n    <li>Drive to the end of the road</li>\n    <li>Turn right</li>\n    <li>Go straight across the first two roundabouts</li>\n    <li>Turn left at the third roundabout</li>\n    <li>The school is on your right, 300 meters up the road</li>\n</ol>\n```\n\n## 5.3 Nesting lists\n\nIt is **perfectly OK** to nest one list inside another one.\n\n```html\n<ol>\n    <li>Remove the skin from the garlic, and chop coarsely.</li>\n    <li>Remove all the seeds and stalk from the pepper, and chop coarsely.</li>\n    <li>Add all the ingredients into a food processor.</li>\n    <li>\n        Process all the ingredients into a paste.\n        <ul>\n            <li>If you want a coarse \"chunky\" hummus, process it for a short time.</li>\n            <li>If you want a smooth hummus, process it for a longer time.</li>\n        </ul>\n    </li>\n</ol>\n```\n\n## 5.4 Description lists\n\nThe purpose of description lists is to *mark up a set of items and their associated descriptions*, such as terms and definitions, or questions and answers.\n\n```html\n<dl>\n    <dt>soliloquy</dt>\n    <dd>\n        In drama, where a character speaks to themselves, representing their inner\n        thoughts or feelings and in the process relaying them to the audience (but\n        not to other characters.)\n    </dd>\n    <dt>monologue</dt>\n    <dd>\n        In drama, where a character speaks their thoughts out loud to share them\n        with the audience and any other characters present.\n    </dd>\n    <dt>aside</dt>\n    <dd>\n        In drama, where a character shares a comment only with the audience for\n        humorous or dramatic effect. This is usually a feeling, thought, or piece of\n        additional background information.\n    </dd>\n</dl>\n```\n\n# 6 Structuring documents\n\n## 6.1 An example\n\nA \"typical website\" could be structured something like this:\n\n<img src=\"/images/webpage-structure-sample.png\"/>\n\n```html\n<!doctype html>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>My page title</title>\n        <link href=\"https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One\" rel=\"stylesheet\" />\n        <link rel=\"stylesheet\" href=\"style.css\" />\n    </head>\n    <body>\n    \n        <!-- The main header used across all the pages of our website -->\n        <header>\n          <h1>Header</h1>\n        </header>\n\n        <!-- navigation bar -->\n        <nav>\n            <ul>\n                <li><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">Our team</a></li>\n                <li><a href=\"#\">Projects</a></li>\n                <li><a href=\"#\">Contact</a></li>\n            </ul>\n\n            <!-- A Search form: another common non-linear way to navigate through a site. -->\n            <form>\n                <input type=\"search\" name=\"q\" placeholder=\"Search query\" />\n                <input type=\"submit\" value=\"Go!\" />\n            </form>\n        </nav>\n\n        <!-- Our page's main content -->\n        <main>\n            <!-- An article -->\n            <article>\n                <h2>Article heading</h2>\n                <p>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam\n                    lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam\n                    viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent\n                    et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt\n                    congue enim, ut porta lorem lacinia consectetur.\n                </p>\n                <section>\n                    <h3>Subsection</h3>\n\n                    <p>\n                        Donec ut librero sed accu vehicula ultricies a non tortor. Lorem\n                        ipsum dolor sit amet, consectetur adipisicing elit. Aenean ut\n                        gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id\n                        dolor.\n                    </p>\n\n                    <p>\n                        Pelientesque auctor nisi id magna consequat sagittis. Curabitur\n                        dapibus, enim sit amet elit pharetra tincidunt feugiat nist\n                        imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed\n                        odio eros.\n                    </p>\n                </section>\n\n                <section>\n                    <h3>Another subsection</h3>\n\n                    <p>\n                        Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum\n                        soclis natoque penatibus et manis dis parturient montes, nascetur\n                        ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at\n                        sem facilisis semper ac in est.\n                    </p>\n\n                    <p>\n                        Vivamus fermentum semper porta. Nunc diam velit, adipscing ut\n                        tristique vitae sagittis vel odio. Maecenas convallis ullamcorper\n                        ultricied. Curabitur ornare, ligula semper consectetur sagittis,\n                        nisi diam iaculis velit, is fringille sem nunc vet mi.\n                    </p>\n                </section>\n            </article>\n\n            <!-- the aside content can also be nested within the main content -->\n            <aside>\n                <h2>Related</h2>\n                <ul>\n                    <li><a href=\"#\">Oh I do like to be beside the seaside</a></li>\n                    <li><a href=\"#\">Oh I do like to be beside the sea</a></li>\n                    <li><a href=\"#\">Although in the North of England</a></li>\n                    <li><a href=\"#\">It never stops raining</a></li>\n                    <li><a href=\"#\">Oh well…</a></li>\n                </ul>\n            </aside>\n        </main>\n\n        <!-- The footer that is used across all the pages of our website -->\n        <footer>\n            <p>©Copyright 2050 by nobody. All rights reversed.</p>\n        </footer>\n    </body>\n</html>\n```\n\n> The appearance of the page shown above — including the layout, colors, and fonts — is achieved by applying CSS to the HTML.\n\n## 6.2 Non-semantic wrappers\n\nSometimes we'll come across a situation where *we can't find an ideal semantic element to group some items together or wrap some content*.\n\nSometimes we might want to just group a set of elements together to affect them all as a single entity with some **CSS** or **JavaScript**.\n\nFor cases like these, **HTML** provides the `<div>` and `<span>` elements.\n\n> We should use these elements preferably with a **suitable class attribute**, to provide some kind of label for them so they can be easily targeted.\n\n`<span>` is an inline non-semantic element.\n\n```html\n<p>\n    The King walked drunkenly back to his room at 01:00, the beer doing nothing to\n    aid him as he staggered through the door.\n    <span class=\"editor-note\">\n        [Editor's note: At this point in the play, the lights should be down low].\n    </span>\n</p>\n```\n\n`<div>` is a block level non-semantic element.\n\n```html\n<div class=\"shopping-cart\">\n    <h2>Shopping cart</h2>\n    <ul>\n        <li>\n            <p>\n                <a href=\"\"><strong>Silver earrings</strong></a>: $99.95.\n            </p>\n            <img src=\"../products/3333-0985/thumb.png\" alt=\"Silver earrings\" />\n        </li>\n        <li>…</li>\n    </ul>\n    <p>Total cost: $237.89</p>\n</div>\n```\n\n## 6.3 Line breaks and horizontal rules\n\n# 7 Advanced text features\n\n\n\n","slug":"frontend-html","published":1,"updated":"2025-01-17T14:12:49.694Z","comments":1,"layout":"post","photos":[],"_id":"cm626nnh70006osijhsoc4ron","content":"<h1 id=\"1-Getting-started-with-HTML\"><a href=\"#1-Getting-started-with-HTML\" class=\"headerlink\" title=\"1 Getting started with HTML\"></a>1 Getting started with HTML</h1><h2 id=\"1-1-What-is-HTML\"><a href=\"#1-1-What-is-HTML\" class=\"headerlink\" title=\"1.1 What is HTML?\"></a>1.1 What is HTML?</h2><p>&emsp;&emsp;HTML (HyperText Markup Language) is the code that is used to structure a web page and its content.</p>\n<h2 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1.2\"></a>1.2</h2><h2 id=\"1-3-Including-special-characters-in-HTML\"><a href=\"#1-3-Including-special-characters-in-HTML\" class=\"headerlink\" title=\"1.3 Including special characters in HTML\"></a>1.3 Including special characters in HTML</h2><table>\n<thead>\n<tr>\n<th align=\"center\">Literal character</th>\n<th align=\"center\">Character reference equivalent</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\"><code>&amp;lt;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\"><code>&amp;gt;</code></td>\n</tr>\n<tr>\n<td align=\"center\">“</td>\n<td align=\"center\"><code>&amp;quot;</code></td>\n</tr>\n<tr>\n<td align=\"center\">‘</td>\n<td align=\"center\"><code>&amp;apos;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\"><code>&amp;amp;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"1-4-HTML-comments\"><a href=\"#1-4-HTML-comments\" class=\"headerlink\" title=\"1.4 HTML comments\"></a>1.4 HTML comments</h2><p>&emsp;&emsp;HTML has a mechanism to write comments in the code. Browsers ignore comments, effectively making comments invisible to the user.</p>\n<pre><code class=\"html\">&lt;p&gt;I&#39;m not inside a comment&lt;/p&gt;\n&lt;!-- &lt;p&gt;I am!&lt;/p&gt; --&gt;\n</code></pre>\n<h1 id=\"2-What’s-in-the-head\"><a href=\"#2-What’s-in-the-head\" class=\"headerlink\" title=\"2 What’s in the head?\"></a>2 What’s in the head?</h1><pre><code class=\"html\">&lt;!doctype html&gt;\n&lt;html lang=&quot;en-US&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;title&gt;My test page&lt;/title&gt;\n        &lt;style&gt;&lt;/style&gt;  &lt;!-- Internal stylesheet --&gt;\n        &lt;script&gt;&lt;/script&gt;  &lt;!-- Internal JavaScript codes --&gt;\n        &lt;link src=&quot;path_to_file&quot;/&gt;  &lt;!-- External stylesheet or JavaScript  --&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;This is my page&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h1 id=\"3-Headings-and-paragraphs\"><a href=\"#3-Headings-and-paragraphs\" class=\"headerlink\" title=\"3 Headings and paragraphs\"></a>3 Headings and paragraphs</h1><p>In HTML, each paragraph has to be wrapped in a <code>&lt;p&gt;</code> element, like so:</p>\n<pre><code class=\"html\">&lt;p&gt;I am a paragraph, oh yes I am.&lt;/p&gt;\n</code></pre>\n<p>Each heading has to be wrapped in a heading element:</p>\n<pre><code class=\"html\">&lt;h1&gt;I am the title of the story.&lt;/h1&gt;\n</code></pre>\n<blockquote>\n<p>There are six heading elements: h1, h2, h3, h4, h5, and h6. Each element represents a different level of content in the document.</p>\n</blockquote>\n<h1 id=\"4-Emphasis-and-importance\"><a href=\"#4-Emphasis-and-importance\" class=\"headerlink\" title=\"4 Emphasis and importance\"></a>4 Emphasis and importance</h1><h2 id=\"4-1-Emphasis-and-importance\"><a href=\"#4-1-Emphasis-and-importance\" class=\"headerlink\" title=\"4.1 Emphasis and importance\"></a>4.1 Emphasis and importance</h2><pre><code class=\"html\">&lt;p&gt;I am &lt;em&gt;glad&lt;/em&gt; you weren&#39;t &lt;em&gt;late&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;This liquid is &lt;strong&gt;highly toxic&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;I am counting on you. &lt;strong&gt;Do not&lt;/strong&gt; be late!&lt;/p&gt;\n&lt;p&gt;This liquid is &lt;strong&gt;highly toxic&lt;/strong&gt; — if you drink it, &lt;strong&gt;you may &lt;em&gt;die&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;\n</code></pre>\n<h2 id=\"4-2-Italic-bold-underline…\"><a href=\"#4-2-Italic-bold-underline…\" class=\"headerlink\" title=\"4.2 Italic, bold, underline…\"></a>4.2 Italic, bold, underline…</h2><pre><code class=\"html\">&lt;!-- scientific names --&gt;\n&lt;p&gt;\n    The Ruby-throated Hummingbird (&lt;i&gt;Archilochus colubris&lt;/i&gt;) is the most common\n    hummingbird in Eastern North America.\n&lt;/p&gt;\n\n&lt;!-- foreign words --&gt;\n&lt;p&gt;\n    The menu was a sea of exotic words like &lt;i lang=&quot;uk-latn&quot;&gt;vatrushka&lt;/i&gt;,\n    &lt;i lang=&quot;id&quot;&gt;nasi goreng&lt;/i&gt; and &lt;i lang=&quot;fr&quot;&gt;soupe à l&#39;oignon&lt;/i&gt;.\n&lt;/p&gt;\n\n&lt;!-- a known misspelling --&gt;\n&lt;p&gt;Someday I&#39;ll learn how to &lt;u class=&quot;spelling-error&quot;&gt;spel&lt;/u&gt; better.&lt;/p&gt;\n\n&lt;!-- term being defined when used in a definition --&gt;\n&lt;dl&gt;\n    &lt;dt&gt;Semantic HTML&lt;/dt&gt;\n    &lt;dd&gt;\n        Use the elements based on their &lt;b&gt;semantic&lt;/b&gt; meaning, not their\n        appearance.\n    &lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre>\n<h1 id=\"5-Lists\"><a href=\"#5-Lists\" class=\"headerlink\" title=\"5 Lists\"></a>5 Lists</h1><h2 id=\"5-1-Unordered-lists\"><a href=\"#5-1-Unordered-lists\" class=\"headerlink\" title=\"5.1 Unordered lists\"></a>5.1 Unordered lists</h2><pre><code class=\"html\">&lt;ul&gt;\n    &lt;li&gt;milk&lt;/li&gt;\n    &lt;li&gt;eggs&lt;/li&gt;\n    &lt;li&gt;bread&lt;/li&gt;\n    &lt;li&gt;hummus&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<h2 id=\"5-2-Ordered-lists\"><a href=\"#5-2-Ordered-lists\" class=\"headerlink\" title=\"5.2 Ordered lists\"></a>5.2 Ordered lists</h2><pre><code class=\"html\">&lt;ol&gt;\n    &lt;li&gt;Drive to the end of the road&lt;/li&gt;\n    &lt;li&gt;Turn right&lt;/li&gt;\n    &lt;li&gt;Go straight across the first two roundabouts&lt;/li&gt;\n    &lt;li&gt;Turn left at the third roundabout&lt;/li&gt;\n    &lt;li&gt;The school is on your right, 300 meters up the road&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n<h2 id=\"5-3-Nesting-lists\"><a href=\"#5-3-Nesting-lists\" class=\"headerlink\" title=\"5.3 Nesting lists\"></a>5.3 Nesting lists</h2><p>It is <strong>perfectly OK</strong> to nest one list inside another one.</p>\n<pre><code class=\"html\">&lt;ol&gt;\n    &lt;li&gt;Remove the skin from the garlic, and chop coarsely.&lt;/li&gt;\n    &lt;li&gt;Remove all the seeds and stalk from the pepper, and chop coarsely.&lt;/li&gt;\n    &lt;li&gt;Add all the ingredients into a food processor.&lt;/li&gt;\n    &lt;li&gt;\n        Process all the ingredients into a paste.\n        &lt;ul&gt;\n            &lt;li&gt;If you want a coarse &quot;chunky&quot; hummus, process it for a short time.&lt;/li&gt;\n            &lt;li&gt;If you want a smooth hummus, process it for a longer time.&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n<h2 id=\"5-4-Description-lists\"><a href=\"#5-4-Description-lists\" class=\"headerlink\" title=\"5.4 Description lists\"></a>5.4 Description lists</h2><p>The purpose of description lists is to <em>mark up a set of items and their associated descriptions</em>, such as terms and definitions, or questions and answers.</p>\n<pre><code class=\"html\">&lt;dl&gt;\n    &lt;dt&gt;soliloquy&lt;/dt&gt;\n    &lt;dd&gt;\n        In drama, where a character speaks to themselves, representing their inner\n        thoughts or feelings and in the process relaying them to the audience (but\n        not to other characters.)\n    &lt;/dd&gt;\n    &lt;dt&gt;monologue&lt;/dt&gt;\n    &lt;dd&gt;\n        In drama, where a character speaks their thoughts out loud to share them\n        with the audience and any other characters present.\n    &lt;/dd&gt;\n    &lt;dt&gt;aside&lt;/dt&gt;\n    &lt;dd&gt;\n        In drama, where a character shares a comment only with the audience for\n        humorous or dramatic effect. This is usually a feeling, thought, or piece of\n        additional background information.\n    &lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre>\n<h1 id=\"6-Structuring-documents\"><a href=\"#6-Structuring-documents\" class=\"headerlink\" title=\"6 Structuring documents\"></a>6 Structuring documents</h1><h2 id=\"6-1-An-example\"><a href=\"#6-1-An-example\" class=\"headerlink\" title=\"6.1 An example\"></a>6.1 An example</h2><p>A “typical website” could be structured something like this:</p>\n<img src=\"/images/webpage-structure-sample.png\"/>\n\n<pre><code class=\"html\">&lt;!doctype html&gt;\n&lt;html lang=&quot;en-US&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;\n        &lt;title&gt;My page title&lt;/title&gt;\n        &lt;link href=&quot;https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One&quot; rel=&quot;stylesheet&quot; /&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    \n        &lt;!-- The main header used across all the pages of our website --&gt;\n        &lt;header&gt;\n          &lt;h1&gt;Header&lt;/h1&gt;\n        &lt;/header&gt;\n\n        &lt;!-- navigation bar --&gt;\n        &lt;nav&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Our team&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Projects&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n\n            &lt;!-- A Search form: another common non-linear way to navigate through a site. --&gt;\n            &lt;form&gt;\n                &lt;input type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;Search query&quot; /&gt;\n                &lt;input type=&quot;submit&quot; value=&quot;Go!&quot; /&gt;\n            &lt;/form&gt;\n        &lt;/nav&gt;\n\n        &lt;!-- Our page&#39;s main content --&gt;\n        &lt;main&gt;\n            &lt;!-- An article --&gt;\n            &lt;article&gt;\n                &lt;h2&gt;Article heading&lt;/h2&gt;\n                &lt;p&gt;\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam\n                    lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam\n                    viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent\n                    et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt\n                    congue enim, ut porta lorem lacinia consectetur.\n                &lt;/p&gt;\n                &lt;section&gt;\n                    &lt;h3&gt;Subsection&lt;/h3&gt;\n\n                    &lt;p&gt;\n                        Donec ut librero sed accu vehicula ultricies a non tortor. Lorem\n                        ipsum dolor sit amet, consectetur adipisicing elit. Aenean ut\n                        gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id\n                        dolor.\n                    &lt;/p&gt;\n\n                    &lt;p&gt;\n                        Pelientesque auctor nisi id magna consequat sagittis. Curabitur\n                        dapibus, enim sit amet elit pharetra tincidunt feugiat nist\n                        imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed\n                        odio eros.\n                    &lt;/p&gt;\n                &lt;/section&gt;\n\n                &lt;section&gt;\n                    &lt;h3&gt;Another subsection&lt;/h3&gt;\n\n                    &lt;p&gt;\n                        Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum\n                        soclis natoque penatibus et manis dis parturient montes, nascetur\n                        ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at\n                        sem facilisis semper ac in est.\n                    &lt;/p&gt;\n\n                    &lt;p&gt;\n                        Vivamus fermentum semper porta. Nunc diam velit, adipscing ut\n                        tristique vitae sagittis vel odio. Maecenas convallis ullamcorper\n                        ultricied. Curabitur ornare, ligula semper consectetur sagittis,\n                        nisi diam iaculis velit, is fringille sem nunc vet mi.\n                    &lt;/p&gt;\n                &lt;/section&gt;\n            &lt;/article&gt;\n\n            &lt;!-- the aside content can also be nested within the main content --&gt;\n            &lt;aside&gt;\n                &lt;h2&gt;Related&lt;/h2&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Oh I do like to be beside the seaside&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Oh I do like to be beside the sea&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Although in the North of England&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;It never stops raining&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Oh well…&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/aside&gt;\n        &lt;/main&gt;\n\n        &lt;!-- The footer that is used across all the pages of our website --&gt;\n        &lt;footer&gt;\n            &lt;p&gt;©Copyright 2050 by nobody. All rights reversed.&lt;/p&gt;\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<blockquote>\n<p>The appearance of the page shown above — including the layout, colors, and fonts — is achieved by applying CSS to the HTML.</p>\n</blockquote>\n<h2 id=\"6-2-Non-semantic-wrappers\"><a href=\"#6-2-Non-semantic-wrappers\" class=\"headerlink\" title=\"6.2 Non-semantic wrappers\"></a>6.2 Non-semantic wrappers</h2><p>Sometimes we’ll come across a situation where <em>we can’t find an ideal semantic element to group some items together or wrap some content</em>.</p>\n<p>Sometimes we might want to just group a set of elements together to affect them all as a single entity with some <strong>CSS</strong> or <strong>JavaScript</strong>.</p>\n<p>For cases like these, <strong>HTML</strong> provides the <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code> elements.</p>\n<blockquote>\n<p>We should use these elements preferably with a <strong>suitable class attribute</strong>, to provide some kind of label for them so they can be easily targeted.</p>\n</blockquote>\n<p><code>&lt;span&gt;</code> is an inline non-semantic element.</p>\n<pre><code class=\"html\">&lt;p&gt;\n    The King walked drunkenly back to his room at 01:00, the beer doing nothing to\n    aid him as he staggered through the door.\n    &lt;span class=&quot;editor-note&quot;&gt;\n        [Editor&#39;s note: At this point in the play, the lights should be down low].\n    &lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n<p><code>&lt;div&gt;</code> is a block level non-semantic element.</p>\n<pre><code class=\"html\">&lt;div class=&quot;shopping-cart&quot;&gt;\n    &lt;h2&gt;Shopping cart&lt;/h2&gt;\n    &lt;ul&gt;\n        &lt;li&gt;\n            &lt;p&gt;\n                &lt;a href=&quot;&quot;&gt;&lt;strong&gt;Silver earrings&lt;/strong&gt;&lt;/a&gt;: $99.95.\n            &lt;/p&gt;\n            &lt;img src=&quot;../products/3333-0985/thumb.png&quot; alt=&quot;Silver earrings&quot; /&gt;\n        &lt;/li&gt;\n        &lt;li&gt;…&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;p&gt;Total cost: $237.89&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h2 id=\"6-3-Line-breaks-and-horizontal-rules\"><a href=\"#6-3-Line-breaks-and-horizontal-rules\" class=\"headerlink\" title=\"6.3 Line breaks and horizontal rules\"></a>6.3 Line breaks and horizontal rules</h2><h1 id=\"7-Advanced-text-features\"><a href=\"#7-Advanced-text-features\" class=\"headerlink\" title=\"7 Advanced text features\"></a>7 Advanced text features</h1>","excerpt":"","more":"<h1 id=\"1-Getting-started-with-HTML\"><a href=\"#1-Getting-started-with-HTML\" class=\"headerlink\" title=\"1 Getting started with HTML\"></a>1 Getting started with HTML</h1><h2 id=\"1-1-What-is-HTML\"><a href=\"#1-1-What-is-HTML\" class=\"headerlink\" title=\"1.1 What is HTML?\"></a>1.1 What is HTML?</h2><p>&emsp;&emsp;HTML (HyperText Markup Language) is the code that is used to structure a web page and its content.</p>\n<h2 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1.2\"></a>1.2</h2><h2 id=\"1-3-Including-special-characters-in-HTML\"><a href=\"#1-3-Including-special-characters-in-HTML\" class=\"headerlink\" title=\"1.3 Including special characters in HTML\"></a>1.3 Including special characters in HTML</h2><table>\n<thead>\n<tr>\n<th align=\"center\">Literal character</th>\n<th align=\"center\">Character reference equivalent</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\"><code>&amp;lt;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\"><code>&amp;gt;</code></td>\n</tr>\n<tr>\n<td align=\"center\">“</td>\n<td align=\"center\"><code>&amp;quot;</code></td>\n</tr>\n<tr>\n<td align=\"center\">‘</td>\n<td align=\"center\"><code>&amp;apos;</code></td>\n</tr>\n<tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\"><code>&amp;amp;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"1-4-HTML-comments\"><a href=\"#1-4-HTML-comments\" class=\"headerlink\" title=\"1.4 HTML comments\"></a>1.4 HTML comments</h2><p>&emsp;&emsp;HTML has a mechanism to write comments in the code. Browsers ignore comments, effectively making comments invisible to the user.</p>\n<pre><code class=\"html\">&lt;p&gt;I&#39;m not inside a comment&lt;/p&gt;\n&lt;!-- &lt;p&gt;I am!&lt;/p&gt; --&gt;\n</code></pre>\n<h1 id=\"2-What’s-in-the-head\"><a href=\"#2-What’s-in-the-head\" class=\"headerlink\" title=\"2 What’s in the head?\"></a>2 What’s in the head?</h1><pre><code class=\"html\">&lt;!doctype html&gt;\n&lt;html lang=&quot;en-US&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;title&gt;My test page&lt;/title&gt;\n        &lt;style&gt;&lt;/style&gt;  &lt;!-- Internal stylesheet --&gt;\n        &lt;script&gt;&lt;/script&gt;  &lt;!-- Internal JavaScript codes --&gt;\n        &lt;link src=&quot;path_to_file&quot;/&gt;  &lt;!-- External stylesheet or JavaScript  --&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;This is my page&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h1 id=\"3-Headings-and-paragraphs\"><a href=\"#3-Headings-and-paragraphs\" class=\"headerlink\" title=\"3 Headings and paragraphs\"></a>3 Headings and paragraphs</h1><p>In HTML, each paragraph has to be wrapped in a <code>&lt;p&gt;</code> element, like so:</p>\n<pre><code class=\"html\">&lt;p&gt;I am a paragraph, oh yes I am.&lt;/p&gt;\n</code></pre>\n<p>Each heading has to be wrapped in a heading element:</p>\n<pre><code class=\"html\">&lt;h1&gt;I am the title of the story.&lt;/h1&gt;\n</code></pre>\n<blockquote>\n<p>There are six heading elements: h1, h2, h3, h4, h5, and h6. Each element represents a different level of content in the document.</p>\n</blockquote>\n<h1 id=\"4-Emphasis-and-importance\"><a href=\"#4-Emphasis-and-importance\" class=\"headerlink\" title=\"4 Emphasis and importance\"></a>4 Emphasis and importance</h1><h2 id=\"4-1-Emphasis-and-importance\"><a href=\"#4-1-Emphasis-and-importance\" class=\"headerlink\" title=\"4.1 Emphasis and importance\"></a>4.1 Emphasis and importance</h2><pre><code class=\"html\">&lt;p&gt;I am &lt;em&gt;glad&lt;/em&gt; you weren&#39;t &lt;em&gt;late&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;This liquid is &lt;strong&gt;highly toxic&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;I am counting on you. &lt;strong&gt;Do not&lt;/strong&gt; be late!&lt;/p&gt;\n&lt;p&gt;This liquid is &lt;strong&gt;highly toxic&lt;/strong&gt; — if you drink it, &lt;strong&gt;you may &lt;em&gt;die&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;\n</code></pre>\n<h2 id=\"4-2-Italic-bold-underline…\"><a href=\"#4-2-Italic-bold-underline…\" class=\"headerlink\" title=\"4.2 Italic, bold, underline…\"></a>4.2 Italic, bold, underline…</h2><pre><code class=\"html\">&lt;!-- scientific names --&gt;\n&lt;p&gt;\n    The Ruby-throated Hummingbird (&lt;i&gt;Archilochus colubris&lt;/i&gt;) is the most common\n    hummingbird in Eastern North America.\n&lt;/p&gt;\n\n&lt;!-- foreign words --&gt;\n&lt;p&gt;\n    The menu was a sea of exotic words like &lt;i lang=&quot;uk-latn&quot;&gt;vatrushka&lt;/i&gt;,\n    &lt;i lang=&quot;id&quot;&gt;nasi goreng&lt;/i&gt; and &lt;i lang=&quot;fr&quot;&gt;soupe à l&#39;oignon&lt;/i&gt;.\n&lt;/p&gt;\n\n&lt;!-- a known misspelling --&gt;\n&lt;p&gt;Someday I&#39;ll learn how to &lt;u class=&quot;spelling-error&quot;&gt;spel&lt;/u&gt; better.&lt;/p&gt;\n\n&lt;!-- term being defined when used in a definition --&gt;\n&lt;dl&gt;\n    &lt;dt&gt;Semantic HTML&lt;/dt&gt;\n    &lt;dd&gt;\n        Use the elements based on their &lt;b&gt;semantic&lt;/b&gt; meaning, not their\n        appearance.\n    &lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre>\n<h1 id=\"5-Lists\"><a href=\"#5-Lists\" class=\"headerlink\" title=\"5 Lists\"></a>5 Lists</h1><h2 id=\"5-1-Unordered-lists\"><a href=\"#5-1-Unordered-lists\" class=\"headerlink\" title=\"5.1 Unordered lists\"></a>5.1 Unordered lists</h2><pre><code class=\"html\">&lt;ul&gt;\n    &lt;li&gt;milk&lt;/li&gt;\n    &lt;li&gt;eggs&lt;/li&gt;\n    &lt;li&gt;bread&lt;/li&gt;\n    &lt;li&gt;hummus&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<h2 id=\"5-2-Ordered-lists\"><a href=\"#5-2-Ordered-lists\" class=\"headerlink\" title=\"5.2 Ordered lists\"></a>5.2 Ordered lists</h2><pre><code class=\"html\">&lt;ol&gt;\n    &lt;li&gt;Drive to the end of the road&lt;/li&gt;\n    &lt;li&gt;Turn right&lt;/li&gt;\n    &lt;li&gt;Go straight across the first two roundabouts&lt;/li&gt;\n    &lt;li&gt;Turn left at the third roundabout&lt;/li&gt;\n    &lt;li&gt;The school is on your right, 300 meters up the road&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n<h2 id=\"5-3-Nesting-lists\"><a href=\"#5-3-Nesting-lists\" class=\"headerlink\" title=\"5.3 Nesting lists\"></a>5.3 Nesting lists</h2><p>It is <strong>perfectly OK</strong> to nest one list inside another one.</p>\n<pre><code class=\"html\">&lt;ol&gt;\n    &lt;li&gt;Remove the skin from the garlic, and chop coarsely.&lt;/li&gt;\n    &lt;li&gt;Remove all the seeds and stalk from the pepper, and chop coarsely.&lt;/li&gt;\n    &lt;li&gt;Add all the ingredients into a food processor.&lt;/li&gt;\n    &lt;li&gt;\n        Process all the ingredients into a paste.\n        &lt;ul&gt;\n            &lt;li&gt;If you want a coarse &quot;chunky&quot; hummus, process it for a short time.&lt;/li&gt;\n            &lt;li&gt;If you want a smooth hummus, process it for a longer time.&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n<h2 id=\"5-4-Description-lists\"><a href=\"#5-4-Description-lists\" class=\"headerlink\" title=\"5.4 Description lists\"></a>5.4 Description lists</h2><p>The purpose of description lists is to <em>mark up a set of items and their associated descriptions</em>, such as terms and definitions, or questions and answers.</p>\n<pre><code class=\"html\">&lt;dl&gt;\n    &lt;dt&gt;soliloquy&lt;/dt&gt;\n    &lt;dd&gt;\n        In drama, where a character speaks to themselves, representing their inner\n        thoughts or feelings and in the process relaying them to the audience (but\n        not to other characters.)\n    &lt;/dd&gt;\n    &lt;dt&gt;monologue&lt;/dt&gt;\n    &lt;dd&gt;\n        In drama, where a character speaks their thoughts out loud to share them\n        with the audience and any other characters present.\n    &lt;/dd&gt;\n    &lt;dt&gt;aside&lt;/dt&gt;\n    &lt;dd&gt;\n        In drama, where a character shares a comment only with the audience for\n        humorous or dramatic effect. This is usually a feeling, thought, or piece of\n        additional background information.\n    &lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre>\n<h1 id=\"6-Structuring-documents\"><a href=\"#6-Structuring-documents\" class=\"headerlink\" title=\"6 Structuring documents\"></a>6 Structuring documents</h1><h2 id=\"6-1-An-example\"><a href=\"#6-1-An-example\" class=\"headerlink\" title=\"6.1 An example\"></a>6.1 An example</h2><p>A “typical website” could be structured something like this:</p>\n<img src=\"/images/webpage-structure-sample.png\"/>\n\n<pre><code class=\"html\">&lt;!doctype html&gt;\n&lt;html lang=&quot;en-US&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot; /&gt;\n        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;\n        &lt;title&gt;My page title&lt;/title&gt;\n        &lt;link href=&quot;https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One&quot; rel=&quot;stylesheet&quot; /&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    \n        &lt;!-- The main header used across all the pages of our website --&gt;\n        &lt;header&gt;\n          &lt;h1&gt;Header&lt;/h1&gt;\n        &lt;/header&gt;\n\n        &lt;!-- navigation bar --&gt;\n        &lt;nav&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Our team&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Projects&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n\n            &lt;!-- A Search form: another common non-linear way to navigate through a site. --&gt;\n            &lt;form&gt;\n                &lt;input type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;Search query&quot; /&gt;\n                &lt;input type=&quot;submit&quot; value=&quot;Go!&quot; /&gt;\n            &lt;/form&gt;\n        &lt;/nav&gt;\n\n        &lt;!-- Our page&#39;s main content --&gt;\n        &lt;main&gt;\n            &lt;!-- An article --&gt;\n            &lt;article&gt;\n                &lt;h2&gt;Article heading&lt;/h2&gt;\n                &lt;p&gt;\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam\n                    lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam\n                    viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent\n                    et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt\n                    congue enim, ut porta lorem lacinia consectetur.\n                &lt;/p&gt;\n                &lt;section&gt;\n                    &lt;h3&gt;Subsection&lt;/h3&gt;\n\n                    &lt;p&gt;\n                        Donec ut librero sed accu vehicula ultricies a non tortor. Lorem\n                        ipsum dolor sit amet, consectetur adipisicing elit. Aenean ut\n                        gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id\n                        dolor.\n                    &lt;/p&gt;\n\n                    &lt;p&gt;\n                        Pelientesque auctor nisi id magna consequat sagittis. Curabitur\n                        dapibus, enim sit amet elit pharetra tincidunt feugiat nist\n                        imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed\n                        odio eros.\n                    &lt;/p&gt;\n                &lt;/section&gt;\n\n                &lt;section&gt;\n                    &lt;h3&gt;Another subsection&lt;/h3&gt;\n\n                    &lt;p&gt;\n                        Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum\n                        soclis natoque penatibus et manis dis parturient montes, nascetur\n                        ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at\n                        sem facilisis semper ac in est.\n                    &lt;/p&gt;\n\n                    &lt;p&gt;\n                        Vivamus fermentum semper porta. Nunc diam velit, adipscing ut\n                        tristique vitae sagittis vel odio. Maecenas convallis ullamcorper\n                        ultricied. Curabitur ornare, ligula semper consectetur sagittis,\n                        nisi diam iaculis velit, is fringille sem nunc vet mi.\n                    &lt;/p&gt;\n                &lt;/section&gt;\n            &lt;/article&gt;\n\n            &lt;!-- the aside content can also be nested within the main content --&gt;\n            &lt;aside&gt;\n                &lt;h2&gt;Related&lt;/h2&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Oh I do like to be beside the seaside&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Oh I do like to be beside the sea&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Although in the North of England&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;It never stops raining&lt;/a&gt;&lt;/li&gt;\n                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Oh well…&lt;/a&gt;&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/aside&gt;\n        &lt;/main&gt;\n\n        &lt;!-- The footer that is used across all the pages of our website --&gt;\n        &lt;footer&gt;\n            &lt;p&gt;©Copyright 2050 by nobody. All rights reversed.&lt;/p&gt;\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<blockquote>\n<p>The appearance of the page shown above — including the layout, colors, and fonts — is achieved by applying CSS to the HTML.</p>\n</blockquote>\n<h2 id=\"6-2-Non-semantic-wrappers\"><a href=\"#6-2-Non-semantic-wrappers\" class=\"headerlink\" title=\"6.2 Non-semantic wrappers\"></a>6.2 Non-semantic wrappers</h2><p>Sometimes we’ll come across a situation where <em>we can’t find an ideal semantic element to group some items together or wrap some content</em>.</p>\n<p>Sometimes we might want to just group a set of elements together to affect them all as a single entity with some <strong>CSS</strong> or <strong>JavaScript</strong>.</p>\n<p>For cases like these, <strong>HTML</strong> provides the <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code> elements.</p>\n<blockquote>\n<p>We should use these elements preferably with a <strong>suitable class attribute</strong>, to provide some kind of label for them so they can be easily targeted.</p>\n</blockquote>\n<p><code>&lt;span&gt;</code> is an inline non-semantic element.</p>\n<pre><code class=\"html\">&lt;p&gt;\n    The King walked drunkenly back to his room at 01:00, the beer doing nothing to\n    aid him as he staggered through the door.\n    &lt;span class=&quot;editor-note&quot;&gt;\n        [Editor&#39;s note: At this point in the play, the lights should be down low].\n    &lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n<p><code>&lt;div&gt;</code> is a block level non-semantic element.</p>\n<pre><code class=\"html\">&lt;div class=&quot;shopping-cart&quot;&gt;\n    &lt;h2&gt;Shopping cart&lt;/h2&gt;\n    &lt;ul&gt;\n        &lt;li&gt;\n            &lt;p&gt;\n                &lt;a href=&quot;&quot;&gt;&lt;strong&gt;Silver earrings&lt;/strong&gt;&lt;/a&gt;: $99.95.\n            &lt;/p&gt;\n            &lt;img src=&quot;../products/3333-0985/thumb.png&quot; alt=&quot;Silver earrings&quot; /&gt;\n        &lt;/li&gt;\n        &lt;li&gt;…&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;p&gt;Total cost: $237.89&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h2 id=\"6-3-Line-breaks-and-horizontal-rules\"><a href=\"#6-3-Line-breaks-and-horizontal-rules\" class=\"headerlink\" title=\"6.3 Line breaks and horizontal rules\"></a>6.3 Line breaks and horizontal rules</h2><h1 id=\"7-Advanced-text-features\"><a href=\"#7-Advanced-text-features\" class=\"headerlink\" title=\"7 Advanced text features\"></a>7 Advanced text features</h1>"},{"title":"Java APIs","date":"2025-01-14T06:50:47.000Z","_content":"\n# 1 The Collections Framework\n\n```java\nMap<String, List<IndustryAsset>> industryNameMap = industryAssetList.stream().collect(Collectors.groupingBy(IndustryAsset::getName));\n```\n\n\n# 2 The Stream API\n\n# 3 The Java I/O API\n\n\nThe used method.\n\n```java\nprivate boolean testStringNumber(String strNum){\n\ttry {\n\t\tint num = Integer.parseInt(strNum);\n\t\treturn true;\n\t} catch (NumberFormatException e) {\n\t\treturn false;\n\t}\n}\n\n//判断strNum是否为大于0的整数\nprivate boolean testStringNumber(String strNum){\n\ttry {\n\t\tint num = Integer.parseInt(strNum);\n\t\treturn num > 0;\n\t} catch (NumberFormatException e) {\n\t\treturn false;\n\t}\n}\n```\n\n","source":"_posts/java-api.md","raw":"---\ntitle: Java APIs\ndate: 2025-01-14 14:50:47\ncategories:\n- Java\ntags:\n---\n\n# 1 The Collections Framework\n\n```java\nMap<String, List<IndustryAsset>> industryNameMap = industryAssetList.stream().collect(Collectors.groupingBy(IndustryAsset::getName));\n```\n\n\n# 2 The Stream API\n\n# 3 The Java I/O API\n\n\nThe used method.\n\n```java\nprivate boolean testStringNumber(String strNum){\n\ttry {\n\t\tint num = Integer.parseInt(strNum);\n\t\treturn true;\n\t} catch (NumberFormatException e) {\n\t\treturn false;\n\t}\n}\n\n//判断strNum是否为大于0的整数\nprivate boolean testStringNumber(String strNum){\n\ttry {\n\t\tint num = Integer.parseInt(strNum);\n\t\treturn num > 0;\n\t} catch (NumberFormatException e) {\n\t\treturn false;\n\t}\n}\n```\n\n","slug":"java-api","published":1,"updated":"2025-01-16T13:29:21.791Z","comments":1,"layout":"post","photos":[],"_id":"cm626nnh90009osij2lw47ohb","content":"<h1 id=\"1-The-Collections-Framework\"><a href=\"#1-The-Collections-Framework\" class=\"headerlink\" title=\"1 The Collections Framework\"></a>1 The Collections Framework</h1><pre><code class=\"java\">Map&lt;String, List&lt;IndustryAsset&gt;&gt; industryNameMap = industryAssetList.stream().collect(Collectors.groupingBy(IndustryAsset::getName));\n</code></pre>\n<h1 id=\"2-The-Stream-API\"><a href=\"#2-The-Stream-API\" class=\"headerlink\" title=\"2 The Stream API\"></a>2 The Stream API</h1><h1 id=\"3-The-Java-I-O-API\"><a href=\"#3-The-Java-I-O-API\" class=\"headerlink\" title=\"3 The Java I&#x2F;O API\"></a>3 The Java I&#x2F;O API</h1><p>The used method.</p>\n<pre><code class=\"java\">private boolean testStringNumber(String strNum)&#123;\n    try &#123;\n        int num = Integer.parseInt(strNum);\n        return true;\n    &#125; catch (NumberFormatException e) &#123;\n        return false;\n    &#125;\n&#125;\n\n//判断strNum是否为大于0的整数\nprivate boolean testStringNumber(String strNum)&#123;\n    try &#123;\n        int num = Integer.parseInt(strNum);\n        return num &gt; 0;\n    &#125; catch (NumberFormatException e) &#123;\n        return false;\n    &#125;\n&#125;\n</code></pre>\n","excerpt":"","more":"<h1 id=\"1-The-Collections-Framework\"><a href=\"#1-The-Collections-Framework\" class=\"headerlink\" title=\"1 The Collections Framework\"></a>1 The Collections Framework</h1><pre><code class=\"java\">Map&lt;String, List&lt;IndustryAsset&gt;&gt; industryNameMap = industryAssetList.stream().collect(Collectors.groupingBy(IndustryAsset::getName));\n</code></pre>\n<h1 id=\"2-The-Stream-API\"><a href=\"#2-The-Stream-API\" class=\"headerlink\" title=\"2 The Stream API\"></a>2 The Stream API</h1><h1 id=\"3-The-Java-I-O-API\"><a href=\"#3-The-Java-I-O-API\" class=\"headerlink\" title=\"3 The Java I&#x2F;O API\"></a>3 The Java I&#x2F;O API</h1><p>The used method.</p>\n<pre><code class=\"java\">private boolean testStringNumber(String strNum)&#123;\n    try &#123;\n        int num = Integer.parseInt(strNum);\n        return true;\n    &#125; catch (NumberFormatException e) &#123;\n        return false;\n    &#125;\n&#125;\n\n//判断strNum是否为大于0的整数\nprivate boolean testStringNumber(String strNum)&#123;\n    try &#123;\n        int num = Integer.parseInt(strNum);\n        return num &gt; 0;\n    &#125; catch (NumberFormatException e) &#123;\n        return false;\n    &#125;\n&#125;\n</code></pre>\n"},{"title":"Mybatis Plus","date":"2025-01-15T06:29:59.000Z","_content":"\n# 1 \n","source":"_posts/java-mybatis-plus.md","raw":"---\ntitle: Mybatis Plus\ndate: 2025-01-15 14:29:59\ncategories:\n- Java\ntags:\n---\n\n# 1 \n","slug":"java-mybatis-plus","published":1,"updated":"2025-01-17T14:12:49.694Z","comments":1,"layout":"post","photos":[],"_id":"cm626nnha000aosijfz8wcrff","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1>","excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1>"},{"title":"About MySQL","date":"2024-12-30T07:57:00.000Z","_content":"\n# 1 Getting started with MySQL\n\n## 1.1 What is MySQL?\n\n&emsp;&emsp;MySQL is a robust database management system designed for managing relational databases. It is open-source software supported by Oracle.\n\n> &emsp;&emsp;MySQL got its name from the daughter of one of its co-founders, **Monty Widenius**, whose name is My. \n> &emsp;&emsp;Combining ‘My’ with ‘SQL,’ we get MySQL.\n\n## 1.2 Install MySQL (Binary Package)\n\n&emsp;&emsp;Click <a href=\"\" target=\"_blank\">here</a> to download a binary package of MySQL.\n\n## 1.2 Install MySQL (Source Code)\n\n# 2 Manage Databases\n\n## 2.1 Select a database \n\n&emsp;&emsp;When we log in to a MySQL database server using the mysql client tool *without specifying a database name*, MySQL server will set the current database to `NULL`.\n\nIt means the current database is not set. \n\nIf we issue a statement, MySQL will issue an error. For example: \n\n```sql\nSELECT * FROM t;\n```\n\nError:\n\n```\nERROR 1046 (3D000): No database selected\n```\n\nTo select a database to work with, we use the `USE` statement.\n\n```sql\nUSE classicmodels;\n```\n\nIf the following message is shown, it means that we have changed the database to **classicmodels** successfully:\n\n```\nDatabase changed\n```\n\n## 2.2 Create a database\n\nTo create a new database in MySQL, we use the `CREATE DATABASE` statement.\n\n```sql\nCREATE DATABASE [IF NOT EXISTS] database_name\n    [CHARACTER SET charset_name]\n    [COLLATE collation_name];\n```\n\nFor example:\n\n```sql\nCREATE DATABASE test_db\n    CHARACTER SET 'utf8'\n    COLLATE 'utf8_general_ci';\n```\n\n## 2.3 Drop a database\n\n```sql\n\n```\n\n# 3 Manage Tables\n\n## 3.1 Create a table\n\n```sql\nCREATE TABLE [IF NOT EXISTS] table_name(\n    column1 data_type [constraints] [COMMENT 'comment_content_1'],\n    column2 data_type [constraints] [COMMENT 'comment_content_2'],\n    ...\n) ENGINE=storage_engine;\n```\n\nIn this syntax:\n\n- `table_name`: the name of the table that we want to create.\n- `column1`, `column2`, etc.: the names of the columns in the table.\n- `datatype`: the data type of each column such as `INT`, `VARCHAR`, `DATE`, etc.\n- `constraints`: These are optional constraints such as `NOT NULL`, `UNIQUE`, `PRIMARY KEY`, and `FOREIGN KEY`.\n- `COMMENT 'comment_content'`: \n\n&emsp;&emsp;In MySQL, each table has a storage engine such as **InnoDB** or **MyISAM**. The `ENGINE` clause allows us to specify the storage engine of the table.\n\nIf we don’t explicitly specify a storage engine, MySQL will use the default storage engine which is InnoDB.\n\n# 4 Query Data\n\n","source":"_posts/mysql-about.md","raw":"---\ntitle: About MySQL\ndate: 2024-12-30 15:57:00\ncategories:\n- MySQL\ntags:\n---\n\n# 1 Getting started with MySQL\n\n## 1.1 What is MySQL?\n\n&emsp;&emsp;MySQL is a robust database management system designed for managing relational databases. It is open-source software supported by Oracle.\n\n> &emsp;&emsp;MySQL got its name from the daughter of one of its co-founders, **Monty Widenius**, whose name is My. \n> &emsp;&emsp;Combining ‘My’ with ‘SQL,’ we get MySQL.\n\n## 1.2 Install MySQL (Binary Package)\n\n&emsp;&emsp;Click <a href=\"\" target=\"_blank\">here</a> to download a binary package of MySQL.\n\n## 1.2 Install MySQL (Source Code)\n\n# 2 Manage Databases\n\n## 2.1 Select a database \n\n&emsp;&emsp;When we log in to a MySQL database server using the mysql client tool *without specifying a database name*, MySQL server will set the current database to `NULL`.\n\nIt means the current database is not set. \n\nIf we issue a statement, MySQL will issue an error. For example: \n\n```sql\nSELECT * FROM t;\n```\n\nError:\n\n```\nERROR 1046 (3D000): No database selected\n```\n\nTo select a database to work with, we use the `USE` statement.\n\n```sql\nUSE classicmodels;\n```\n\nIf the following message is shown, it means that we have changed the database to **classicmodels** successfully:\n\n```\nDatabase changed\n```\n\n## 2.2 Create a database\n\nTo create a new database in MySQL, we use the `CREATE DATABASE` statement.\n\n```sql\nCREATE DATABASE [IF NOT EXISTS] database_name\n    [CHARACTER SET charset_name]\n    [COLLATE collation_name];\n```\n\nFor example:\n\n```sql\nCREATE DATABASE test_db\n    CHARACTER SET 'utf8'\n    COLLATE 'utf8_general_ci';\n```\n\n## 2.3 Drop a database\n\n```sql\n\n```\n\n# 3 Manage Tables\n\n## 3.1 Create a table\n\n```sql\nCREATE TABLE [IF NOT EXISTS] table_name(\n    column1 data_type [constraints] [COMMENT 'comment_content_1'],\n    column2 data_type [constraints] [COMMENT 'comment_content_2'],\n    ...\n) ENGINE=storage_engine;\n```\n\nIn this syntax:\n\n- `table_name`: the name of the table that we want to create.\n- `column1`, `column2`, etc.: the names of the columns in the table.\n- `datatype`: the data type of each column such as `INT`, `VARCHAR`, `DATE`, etc.\n- `constraints`: These are optional constraints such as `NOT NULL`, `UNIQUE`, `PRIMARY KEY`, and `FOREIGN KEY`.\n- `COMMENT 'comment_content'`: \n\n&emsp;&emsp;In MySQL, each table has a storage engine such as **InnoDB** or **MyISAM**. The `ENGINE` clause allows us to specify the storage engine of the table.\n\nIf we don’t explicitly specify a storage engine, MySQL will use the default storage engine which is InnoDB.\n\n# 4 Query Data\n\n","slug":"mysql-about","published":1,"updated":"2025-01-16T13:29:21.793Z","comments":1,"layout":"post","photos":[],"_id":"cm626nnhc000eosij82bhbqpu","content":"<h1 id=\"1-Getting-started-with-MySQL\"><a href=\"#1-Getting-started-with-MySQL\" class=\"headerlink\" title=\"1 Getting started with MySQL\"></a>1 Getting started with MySQL</h1><h2 id=\"1-1-What-is-MySQL\"><a href=\"#1-1-What-is-MySQL\" class=\"headerlink\" title=\"1.1 What is MySQL?\"></a>1.1 What is MySQL?</h2><p>&emsp;&emsp;MySQL is a robust database management system designed for managing relational databases. It is open-source software supported by Oracle.</p>\n<blockquote>\n<p>&emsp;&emsp;MySQL got its name from the daughter of one of its co-founders, <strong>Monty Widenius</strong>, whose name is My.<br>&emsp;&emsp;Combining ‘My’ with ‘SQL,’ we get MySQL.</p>\n</blockquote>\n<h2 id=\"1-2-Install-MySQL-Binary-Package\"><a href=\"#1-2-Install-MySQL-Binary-Package\" class=\"headerlink\" title=\"1.2 Install MySQL (Binary Package)\"></a>1.2 Install MySQL (Binary Package)</h2><p>&emsp;&emsp;Click <a href=\"\" target=\"_blank\">here</a> to download a binary package of MySQL.</p>\n<h2 id=\"1-2-Install-MySQL-Source-Code\"><a href=\"#1-2-Install-MySQL-Source-Code\" class=\"headerlink\" title=\"1.2 Install MySQL (Source Code)\"></a>1.2 Install MySQL (Source Code)</h2><h1 id=\"2-Manage-Databases\"><a href=\"#2-Manage-Databases\" class=\"headerlink\" title=\"2 Manage Databases\"></a>2 Manage Databases</h1><h2 id=\"2-1-Select-a-database\"><a href=\"#2-1-Select-a-database\" class=\"headerlink\" title=\"2.1 Select a database\"></a>2.1 Select a database</h2><p>&emsp;&emsp;When we log in to a MySQL database server using the mysql client tool <em>without specifying a database name</em>, MySQL server will set the current database to <code>NULL</code>.</p>\n<p>It means the current database is not set. </p>\n<p>If we issue a statement, MySQL will issue an error. For example: </p>\n<pre><code class=\"sql\">SELECT * FROM t;\n</code></pre>\n<p>Error:</p>\n<pre><code>ERROR 1046 (3D000): No database selected\n</code></pre>\n<p>To select a database to work with, we use the <code>USE</code> statement.</p>\n<pre><code class=\"sql\">USE classicmodels;\n</code></pre>\n<p>If the following message is shown, it means that we have changed the database to <strong>classicmodels</strong> successfully:</p>\n<pre><code>Database changed\n</code></pre>\n<h2 id=\"2-2-Create-a-database\"><a href=\"#2-2-Create-a-database\" class=\"headerlink\" title=\"2.2 Create a database\"></a>2.2 Create a database</h2><p>To create a new database in MySQL, we use the <code>CREATE DATABASE</code> statement.</p>\n<pre><code class=\"sql\">CREATE DATABASE [IF NOT EXISTS] database_name\n    [CHARACTER SET charset_name]\n    [COLLATE collation_name];\n</code></pre>\n<p>For example:</p>\n<pre><code class=\"sql\">CREATE DATABASE test_db\n    CHARACTER SET &#39;utf8&#39;\n    COLLATE &#39;utf8_general_ci&#39;;\n</code></pre>\n<h2 id=\"2-3-Drop-a-database\"><a href=\"#2-3-Drop-a-database\" class=\"headerlink\" title=\"2.3 Drop a database\"></a>2.3 Drop a database</h2><pre><code class=\"sql\">\n</code></pre>\n<h1 id=\"3-Manage-Tables\"><a href=\"#3-Manage-Tables\" class=\"headerlink\" title=\"3 Manage Tables\"></a>3 Manage Tables</h1><h2 id=\"3-1-Create-a-table\"><a href=\"#3-1-Create-a-table\" class=\"headerlink\" title=\"3.1 Create a table\"></a>3.1 Create a table</h2><pre><code class=\"sql\">CREATE TABLE [IF NOT EXISTS] table_name(\n    column1 data_type [constraints] [COMMENT &#39;comment_content_1&#39;],\n    column2 data_type [constraints] [COMMENT &#39;comment_content_2&#39;],\n    ...\n) ENGINE=storage_engine;\n</code></pre>\n<p>In this syntax:</p>\n<ul>\n<li><code>table_name</code>: the name of the table that we want to create.</li>\n<li><code>column1</code>, <code>column2</code>, etc.: the names of the columns in the table.</li>\n<li><code>datatype</code>: the data type of each column such as <code>INT</code>, <code>VARCHAR</code>, <code>DATE</code>, etc.</li>\n<li><code>constraints</code>: These are optional constraints such as <code>NOT NULL</code>, <code>UNIQUE</code>, <code>PRIMARY KEY</code>, and <code>FOREIGN KEY</code>.</li>\n<li><code>COMMENT &#39;comment_content&#39;</code>:</li>\n</ul>\n<p>&emsp;&emsp;In MySQL, each table has a storage engine such as <strong>InnoDB</strong> or <strong>MyISAM</strong>. The <code>ENGINE</code> clause allows us to specify the storage engine of the table.</p>\n<p>If we don’t explicitly specify a storage engine, MySQL will use the default storage engine which is InnoDB.</p>\n<h1 id=\"4-Query-Data\"><a href=\"#4-Query-Data\" class=\"headerlink\" title=\"4 Query Data\"></a>4 Query Data</h1>","excerpt":"","more":"<h1 id=\"1-Getting-started-with-MySQL\"><a href=\"#1-Getting-started-with-MySQL\" class=\"headerlink\" title=\"1 Getting started with MySQL\"></a>1 Getting started with MySQL</h1><h2 id=\"1-1-What-is-MySQL\"><a href=\"#1-1-What-is-MySQL\" class=\"headerlink\" title=\"1.1 What is MySQL?\"></a>1.1 What is MySQL?</h2><p>&emsp;&emsp;MySQL is a robust database management system designed for managing relational databases. It is open-source software supported by Oracle.</p>\n<blockquote>\n<p>&emsp;&emsp;MySQL got its name from the daughter of one of its co-founders, <strong>Monty Widenius</strong>, whose name is My.<br>&emsp;&emsp;Combining ‘My’ with ‘SQL,’ we get MySQL.</p>\n</blockquote>\n<h2 id=\"1-2-Install-MySQL-Binary-Package\"><a href=\"#1-2-Install-MySQL-Binary-Package\" class=\"headerlink\" title=\"1.2 Install MySQL (Binary Package)\"></a>1.2 Install MySQL (Binary Package)</h2><p>&emsp;&emsp;Click <a href=\"\" target=\"_blank\">here</a> to download a binary package of MySQL.</p>\n<h2 id=\"1-2-Install-MySQL-Source-Code\"><a href=\"#1-2-Install-MySQL-Source-Code\" class=\"headerlink\" title=\"1.2 Install MySQL (Source Code)\"></a>1.2 Install MySQL (Source Code)</h2><h1 id=\"2-Manage-Databases\"><a href=\"#2-Manage-Databases\" class=\"headerlink\" title=\"2 Manage Databases\"></a>2 Manage Databases</h1><h2 id=\"2-1-Select-a-database\"><a href=\"#2-1-Select-a-database\" class=\"headerlink\" title=\"2.1 Select a database\"></a>2.1 Select a database</h2><p>&emsp;&emsp;When we log in to a MySQL database server using the mysql client tool <em>without specifying a database name</em>, MySQL server will set the current database to <code>NULL</code>.</p>\n<p>It means the current database is not set. </p>\n<p>If we issue a statement, MySQL will issue an error. For example: </p>\n<pre><code class=\"sql\">SELECT * FROM t;\n</code></pre>\n<p>Error:</p>\n<pre><code>ERROR 1046 (3D000): No database selected\n</code></pre>\n<p>To select a database to work with, we use the <code>USE</code> statement.</p>\n<pre><code class=\"sql\">USE classicmodels;\n</code></pre>\n<p>If the following message is shown, it means that we have changed the database to <strong>classicmodels</strong> successfully:</p>\n<pre><code>Database changed\n</code></pre>\n<h2 id=\"2-2-Create-a-database\"><a href=\"#2-2-Create-a-database\" class=\"headerlink\" title=\"2.2 Create a database\"></a>2.2 Create a database</h2><p>To create a new database in MySQL, we use the <code>CREATE DATABASE</code> statement.</p>\n<pre><code class=\"sql\">CREATE DATABASE [IF NOT EXISTS] database_name\n    [CHARACTER SET charset_name]\n    [COLLATE collation_name];\n</code></pre>\n<p>For example:</p>\n<pre><code class=\"sql\">CREATE DATABASE test_db\n    CHARACTER SET &#39;utf8&#39;\n    COLLATE &#39;utf8_general_ci&#39;;\n</code></pre>\n<h2 id=\"2-3-Drop-a-database\"><a href=\"#2-3-Drop-a-database\" class=\"headerlink\" title=\"2.3 Drop a database\"></a>2.3 Drop a database</h2><pre><code class=\"sql\">\n</code></pre>\n<h1 id=\"3-Manage-Tables\"><a href=\"#3-Manage-Tables\" class=\"headerlink\" title=\"3 Manage Tables\"></a>3 Manage Tables</h1><h2 id=\"3-1-Create-a-table\"><a href=\"#3-1-Create-a-table\" class=\"headerlink\" title=\"3.1 Create a table\"></a>3.1 Create a table</h2><pre><code class=\"sql\">CREATE TABLE [IF NOT EXISTS] table_name(\n    column1 data_type [constraints] [COMMENT &#39;comment_content_1&#39;],\n    column2 data_type [constraints] [COMMENT &#39;comment_content_2&#39;],\n    ...\n) ENGINE=storage_engine;\n</code></pre>\n<p>In this syntax:</p>\n<ul>\n<li><code>table_name</code>: the name of the table that we want to create.</li>\n<li><code>column1</code>, <code>column2</code>, etc.: the names of the columns in the table.</li>\n<li><code>datatype</code>: the data type of each column such as <code>INT</code>, <code>VARCHAR</code>, <code>DATE</code>, etc.</li>\n<li><code>constraints</code>: These are optional constraints such as <code>NOT NULL</code>, <code>UNIQUE</code>, <code>PRIMARY KEY</code>, and <code>FOREIGN KEY</code>.</li>\n<li><code>COMMENT &#39;comment_content&#39;</code>:</li>\n</ul>\n<p>&emsp;&emsp;In MySQL, each table has a storage engine such as <strong>InnoDB</strong> or <strong>MyISAM</strong>. The <code>ENGINE</code> clause allows us to specify the storage engine of the table.</p>\n<p>If we don’t explicitly specify a storage engine, MySQL will use the default storage engine which is InnoDB.</p>\n<h1 id=\"4-Query-Data\"><a href=\"#4-Query-Data\" class=\"headerlink\" title=\"4 Query Data\"></a>4 Query Data</h1>"},{"title":"MySQL CRUD","date":"2024-12-30T07:57:14.000Z","_content":"\n# 1 Manage Databases\n\n## 1.1 Select a database \n\n&emsp;&emsp;When we log in to a MySQL database server using the mysql client tool *without specifying a database name*, MySQL server will set the current database to `NULL`.\n\nIt means the current database is not set. \n\nIf we issue a statement, MySQL will issue an error. For example: \n\n```sql\nSELECT * FROM t;\n```\n\nError:\n\n```\nERROR 1046 (3D000): No database selected\n```\n\nTo select a database to work with, we use the `USE` statement.\n\n```sql\nUSE classicmodels;\n```\n\nIf the following message is shown, it means that we have changed the database to **classicmodels** successfully:\n\n```\nDatabase changed\n```\n\n## 1.2 Create a database\n\nTo create a new database in MySQL, we use the `CREATE DATABASE` statement.\n\n```sql\nCREATE DATABASE [IF NOT EXISTS] database_name\n    [CHARACTER SET charset_name]\n    [COLLATE collation_name];\n```\n\nFor example:\n\n```sql\nCREATE DATABASE test_db\n    CHARACTER SET 'utf8'\n    COLLATE 'utf8_general_ci';\n```\n\n## 1.3 Drop a database\n\n```sql\n\n```\n\n# 2 Manage Tables\n\n## 2.1 Create a table\n\nCreate a table named `test_table`:\n\n```sql\nCREATE TABLE IF NOT EXISTS test_table(\n\tid int PRIMARY KEY AUTO_INCREMENT COMMENT 'Primary Key ID',\n\tname varchar(100) NOT NULL COMMENT 'username',\n\t`password` varchar(100) NOT NULL COMMENT 'password',\n\tnick_name varchar(200) NOT NULL COMMENT 'nick name'\n)\nENGINE=InnoDB  # Storage Engine\nDEFAULT CHARSET=utf8mb4  # Character Set\nCOLLATE=utf8mb4_general_ci  # Collation\nCOMMENT 'Table for testing';  # Table Comment\n```\n\n&emsp;&emsp;In MySQL, each table has a storage engine such as **InnoDB** or **MyISAM**. The `ENGINE` clause allows us to specify the storage engine of the table.\n\nInnoDB became the default storage engine starting with MySQL version 5.5. If we don’t explicitly specify a storage engine, MySQL will use the default storage engine which is InnoDB.\n\n## 2.2 Rename a Table\n\n```sql\nRENAME TABLE table_name\nTO new_table_name;\n```\n\n### 2.2.1 Renaming a table referenced by a view\n\n# 3 Query Data\n\n\n\n","source":"_posts/mysql-crud.md","raw":"---\ntitle: MySQL CRUD\ndate: 2024-12-30 15:57:14\ncategories:\n- MySQL\ntags:\n---\n\n# 1 Manage Databases\n\n## 1.1 Select a database \n\n&emsp;&emsp;When we log in to a MySQL database server using the mysql client tool *without specifying a database name*, MySQL server will set the current database to `NULL`.\n\nIt means the current database is not set. \n\nIf we issue a statement, MySQL will issue an error. For example: \n\n```sql\nSELECT * FROM t;\n```\n\nError:\n\n```\nERROR 1046 (3D000): No database selected\n```\n\nTo select a database to work with, we use the `USE` statement.\n\n```sql\nUSE classicmodels;\n```\n\nIf the following message is shown, it means that we have changed the database to **classicmodels** successfully:\n\n```\nDatabase changed\n```\n\n## 1.2 Create a database\n\nTo create a new database in MySQL, we use the `CREATE DATABASE` statement.\n\n```sql\nCREATE DATABASE [IF NOT EXISTS] database_name\n    [CHARACTER SET charset_name]\n    [COLLATE collation_name];\n```\n\nFor example:\n\n```sql\nCREATE DATABASE test_db\n    CHARACTER SET 'utf8'\n    COLLATE 'utf8_general_ci';\n```\n\n## 1.3 Drop a database\n\n```sql\n\n```\n\n# 2 Manage Tables\n\n## 2.1 Create a table\n\nCreate a table named `test_table`:\n\n```sql\nCREATE TABLE IF NOT EXISTS test_table(\n\tid int PRIMARY KEY AUTO_INCREMENT COMMENT 'Primary Key ID',\n\tname varchar(100) NOT NULL COMMENT 'username',\n\t`password` varchar(100) NOT NULL COMMENT 'password',\n\tnick_name varchar(200) NOT NULL COMMENT 'nick name'\n)\nENGINE=InnoDB  # Storage Engine\nDEFAULT CHARSET=utf8mb4  # Character Set\nCOLLATE=utf8mb4_general_ci  # Collation\nCOMMENT 'Table for testing';  # Table Comment\n```\n\n&emsp;&emsp;In MySQL, each table has a storage engine such as **InnoDB** or **MyISAM**. The `ENGINE` clause allows us to specify the storage engine of the table.\n\nInnoDB became the default storage engine starting with MySQL version 5.5. If we don’t explicitly specify a storage engine, MySQL will use the default storage engine which is InnoDB.\n\n## 2.2 Rename a Table\n\n```sql\nRENAME TABLE table_name\nTO new_table_name;\n```\n\n### 2.2.1 Renaming a table referenced by a view\n\n# 3 Query Data\n\n\n\n","slug":"mysql-crud","published":1,"updated":"2025-01-17T14:12:41.443Z","comments":1,"layout":"post","photos":[],"_id":"cm626nnhd000hosij8mjh78sw","content":"<h1 id=\"1-Manage-Databases\"><a href=\"#1-Manage-Databases\" class=\"headerlink\" title=\"1 Manage Databases\"></a>1 Manage Databases</h1><h2 id=\"1-1-Select-a-database\"><a href=\"#1-1-Select-a-database\" class=\"headerlink\" title=\"1.1 Select a database\"></a>1.1 Select a database</h2><p>&emsp;&emsp;When we log in to a MySQL database server using the mysql client tool <em>without specifying a database name</em>, MySQL server will set the current database to <code>NULL</code>.</p>\n<p>It means the current database is not set. </p>\n<p>If we issue a statement, MySQL will issue an error. For example: </p>\n<pre><code class=\"sql\">SELECT * FROM t;\n</code></pre>\n<p>Error:</p>\n<pre><code>ERROR 1046 (3D000): No database selected\n</code></pre>\n<p>To select a database to work with, we use the <code>USE</code> statement.</p>\n<pre><code class=\"sql\">USE classicmodels;\n</code></pre>\n<p>If the following message is shown, it means that we have changed the database to <strong>classicmodels</strong> successfully:</p>\n<pre><code>Database changed\n</code></pre>\n<h2 id=\"1-2-Create-a-database\"><a href=\"#1-2-Create-a-database\" class=\"headerlink\" title=\"1.2 Create a database\"></a>1.2 Create a database</h2><p>To create a new database in MySQL, we use the <code>CREATE DATABASE</code> statement.</p>\n<pre><code class=\"sql\">CREATE DATABASE [IF NOT EXISTS] database_name\n    [CHARACTER SET charset_name]\n    [COLLATE collation_name];\n</code></pre>\n<p>For example:</p>\n<pre><code class=\"sql\">CREATE DATABASE test_db\n    CHARACTER SET &#39;utf8&#39;\n    COLLATE &#39;utf8_general_ci&#39;;\n</code></pre>\n<h2 id=\"1-3-Drop-a-database\"><a href=\"#1-3-Drop-a-database\" class=\"headerlink\" title=\"1.3 Drop a database\"></a>1.3 Drop a database</h2><pre><code class=\"sql\">\n</code></pre>\n<h1 id=\"2-Manage-Tables\"><a href=\"#2-Manage-Tables\" class=\"headerlink\" title=\"2 Manage Tables\"></a>2 Manage Tables</h1><h2 id=\"2-1-Create-a-table\"><a href=\"#2-1-Create-a-table\" class=\"headerlink\" title=\"2.1 Create a table\"></a>2.1 Create a table</h2><p>Create a table named <code>test_table</code>:</p>\n<pre><code class=\"sql\">CREATE TABLE IF NOT EXISTS test_table(\n    id int PRIMARY KEY AUTO_INCREMENT COMMENT &#39;Primary Key ID&#39;,\n    name varchar(100) NOT NULL COMMENT &#39;username&#39;,\n    `password` varchar(100) NOT NULL COMMENT &#39;password&#39;,\n    nick_name varchar(200) NOT NULL COMMENT &#39;nick name&#39;\n)\nENGINE=InnoDB  # Storage Engine\nDEFAULT CHARSET=utf8mb4  # Character Set\nCOLLATE=utf8mb4_general_ci  # Collation\nCOMMENT &#39;Table for testing&#39;;  # Table Comment\n</code></pre>\n<p>&emsp;&emsp;In MySQL, each table has a storage engine such as <strong>InnoDB</strong> or <strong>MyISAM</strong>. The <code>ENGINE</code> clause allows us to specify the storage engine of the table.</p>\n<p>InnoDB became the default storage engine starting with MySQL version 5.5. If we don’t explicitly specify a storage engine, MySQL will use the default storage engine which is InnoDB.</p>\n<h2 id=\"2-2-Rename-a-Table\"><a href=\"#2-2-Rename-a-Table\" class=\"headerlink\" title=\"2.2 Rename a Table\"></a>2.2 Rename a Table</h2><pre><code class=\"sql\">RENAME TABLE table_name\nTO new_table_name;\n</code></pre>\n<h3 id=\"2-2-1-Renaming-a-table-referenced-by-a-view\"><a href=\"#2-2-1-Renaming-a-table-referenced-by-a-view\" class=\"headerlink\" title=\"2.2.1 Renaming a table referenced by a view\"></a>2.2.1 Renaming a table referenced by a view</h3><h1 id=\"3-Query-Data\"><a href=\"#3-Query-Data\" class=\"headerlink\" title=\"3 Query Data\"></a>3 Query Data</h1>","excerpt":"","more":"<h1 id=\"1-Manage-Databases\"><a href=\"#1-Manage-Databases\" class=\"headerlink\" title=\"1 Manage Databases\"></a>1 Manage Databases</h1><h2 id=\"1-1-Select-a-database\"><a href=\"#1-1-Select-a-database\" class=\"headerlink\" title=\"1.1 Select a database\"></a>1.1 Select a database</h2><p>&emsp;&emsp;When we log in to a MySQL database server using the mysql client tool <em>without specifying a database name</em>, MySQL server will set the current database to <code>NULL</code>.</p>\n<p>It means the current database is not set. </p>\n<p>If we issue a statement, MySQL will issue an error. For example: </p>\n<pre><code class=\"sql\">SELECT * FROM t;\n</code></pre>\n<p>Error:</p>\n<pre><code>ERROR 1046 (3D000): No database selected\n</code></pre>\n<p>To select a database to work with, we use the <code>USE</code> statement.</p>\n<pre><code class=\"sql\">USE classicmodels;\n</code></pre>\n<p>If the following message is shown, it means that we have changed the database to <strong>classicmodels</strong> successfully:</p>\n<pre><code>Database changed\n</code></pre>\n<h2 id=\"1-2-Create-a-database\"><a href=\"#1-2-Create-a-database\" class=\"headerlink\" title=\"1.2 Create a database\"></a>1.2 Create a database</h2><p>To create a new database in MySQL, we use the <code>CREATE DATABASE</code> statement.</p>\n<pre><code class=\"sql\">CREATE DATABASE [IF NOT EXISTS] database_name\n    [CHARACTER SET charset_name]\n    [COLLATE collation_name];\n</code></pre>\n<p>For example:</p>\n<pre><code class=\"sql\">CREATE DATABASE test_db\n    CHARACTER SET &#39;utf8&#39;\n    COLLATE &#39;utf8_general_ci&#39;;\n</code></pre>\n<h2 id=\"1-3-Drop-a-database\"><a href=\"#1-3-Drop-a-database\" class=\"headerlink\" title=\"1.3 Drop a database\"></a>1.3 Drop a database</h2><pre><code class=\"sql\">\n</code></pre>\n<h1 id=\"2-Manage-Tables\"><a href=\"#2-Manage-Tables\" class=\"headerlink\" title=\"2 Manage Tables\"></a>2 Manage Tables</h1><h2 id=\"2-1-Create-a-table\"><a href=\"#2-1-Create-a-table\" class=\"headerlink\" title=\"2.1 Create a table\"></a>2.1 Create a table</h2><p>Create a table named <code>test_table</code>:</p>\n<pre><code class=\"sql\">CREATE TABLE IF NOT EXISTS test_table(\n    id int PRIMARY KEY AUTO_INCREMENT COMMENT &#39;Primary Key ID&#39;,\n    name varchar(100) NOT NULL COMMENT &#39;username&#39;,\n    `password` varchar(100) NOT NULL COMMENT &#39;password&#39;,\n    nick_name varchar(200) NOT NULL COMMENT &#39;nick name&#39;\n)\nENGINE=InnoDB  # Storage Engine\nDEFAULT CHARSET=utf8mb4  # Character Set\nCOLLATE=utf8mb4_general_ci  # Collation\nCOMMENT &#39;Table for testing&#39;;  # Table Comment\n</code></pre>\n<p>&emsp;&emsp;In MySQL, each table has a storage engine such as <strong>InnoDB</strong> or <strong>MyISAM</strong>. The <code>ENGINE</code> clause allows us to specify the storage engine of the table.</p>\n<p>InnoDB became the default storage engine starting with MySQL version 5.5. If we don’t explicitly specify a storage engine, MySQL will use the default storage engine which is InnoDB.</p>\n<h2 id=\"2-2-Rename-a-Table\"><a href=\"#2-2-Rename-a-Table\" class=\"headerlink\" title=\"2.2 Rename a Table\"></a>2.2 Rename a Table</h2><pre><code class=\"sql\">RENAME TABLE table_name\nTO new_table_name;\n</code></pre>\n<h3 id=\"2-2-1-Renaming-a-table-referenced-by-a-view\"><a href=\"#2-2-1-Renaming-a-table-referenced-by-a-view\" class=\"headerlink\" title=\"2.2.1 Renaming a table referenced by a view\"></a>2.2.1 Renaming a table referenced by a view</h3><h1 id=\"3-Query-Data\"><a href=\"#3-Query-Data\" class=\"headerlink\" title=\"3 Query Data\"></a>3 Query Data</h1>"},{"title":"python-language","date":"2025-01-20T07:07:24.000Z","_content":"\n# 1 \n","source":"_posts/python-language.md","raw":"---\ntitle: python-language\ndate: 2025-01-20 15:07:24\ncategories:\n- Python\ntags:\n---\n\n# 1 \n","slug":"python-language","published":1,"updated":"2025-02-14T15:35:11.079Z","_id":"cm64pi98z0000bn3scr2s6my9","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1>","excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1>"},{"title":"C Programming Language","date":"2024-12-22T15:08:37.000Z","_content":"\n# 1 Introduction to C\n\n&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. \n\n```c\n#include <stdio.h>  //include information about standard library\n\nmain()  //define a funcation named \"main\"\n{  //statements of \"main\" are enclosed in braces\n    printf(\"hello, world\\n\");\n}\n```\n\n> &emsp;&emsp;A C program begins executing at the beginning of **main**. This means that every C program must have a **main** somewhere.\n\n# 2 Types, constants and declarations\n\n## 2.1 Variable names\n\nThere are some restrictions on the names of variables and symbolic constants:\n\n* Names are made up of letters and digits; the first character must be a letter. \n* The underscore `_` counts as a letter, it is sometimes useful for **improving the readability of long variable names**. (Don't begin variable names with underscore, however, since library routines often use such names. )\n* **Upper case and lower case letters are distinct**, so \"x\" and \"X\" are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)\n\n## 2.2 Data types and sizes\n\nThere are only a few basic data types in C:\n\n| type    | description                                                                          |\n|:-------:|:------------------------------------------------------------------------------------:|\n| `char`  | **A single byte**, capable of holding one character in the local character set.      |\n| `int`   | An integer, *typically reflecting the natural size of integers on the host machine*. |\n| `float` | Single-precision floating point.                                                     |\n| `double`| Double-precision floating point.                                                     |\n\n&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. \n\n`short` and `long` apply to integers:\n\n```c\nshort int sh;\nlong int counter;\n```\n\n&emsp;&emsp;The word \"int\" can be omitted in such declarations, and typically is.\n\n```c\nshort sh;\nlong counter;\n```\n\n> &emsp;&emsp;The intent is that `short` and `long` should provide different lengths of integers where practical; `int` will normally be the natural size for a particular machine.\n\nOn a 32-bit machine, `short` is often 16 bits, `long` 32 bits, and `int` either 16 or 32 bits.\n\nOn a 64-bit machine, `short` is 16 bits, `long` 64 bits, and `int` 32 bits.\n\n...\n\n> &emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that *`short`s and `int`s are at least 16 bits, `long`s are at least 32 bits, and `short` is no longer than `int`, which is no longer than `long`*.\n\n## 2.3 Constants\n\n&emsp;&emsp;An integer constant like `1234` is an `int`. A `long` constant is written with a terminal `l` or `L`, as in `123456789L`; an integer too big to fit into an `int` will also be taken as a `long`. The `unsigned int` constants are written with a terminal `u` or `U`, and the suffix `ul` or `UL` indicates `unsigned long`.\n\n```c\nint a = 1234;\nunsigned int ua = 1234u;\n\nlong b = 1234567890L;\nunsigned long ub = 1234567890UL;\n```\n\nThe value of an integer *can be specified in octal or hexadecimal instead of decimal*: A leading `0` on an integer constant means **octal**; a leading `0x` or `0X` means **hexadecimal**.  \n\n```c\nint a = 037;  // 31 in octal\nint b = 0x1F;  // 31 in hexadecimal\n\nprintf(\"a(037) = %d\\n\", a);  // a(037) = 31\nprintf(\"b(0x1F) = %d\\n\", b);  // b(0x1F) = 31\n```\n\n&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is `double`, unless suffixed. The suffixes `f` or `F` indicate a `float` constant; `l` or `L` indicate a `long double`.\n\n```c\ndouble d = 12.34;\nfloat f = 12.34f;\nlong double ld = 12.34L;\n```\n\n&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as `'x'`. The value of a character constant is the numeric value of the character in the machine's character set.\n\n```c\nchar c = 'x';\n```\n\n> &emsp;&emsp;For example, in the ASCII character set the character constant `'0'` has the value `48`, which is unrelated to the numeric value `0`. If we write `'0'` instead of a numeric value like `48` that depends on character set, *the program is independent of the particular value and easier to read*.\n\n```c\nchar c = '0';\nint ci = c;  //ci = 48 \n```\n\n## 2.4 Declarations\n\n&emsp;&emsp;*All variables must be declared before use*, although certain declarations can be made implicitly by context.\n\nA declaration specifies a type, and contains a list of one or more variables of that type, as in:\n\n```c\nint lower, upper, step;\nchar c, line[100];\n```\n\nVariables can be distributed among declarations in any fashion; the lists above could equally well be written as:\n\n```c\nint lower;\nint upper;\nint step;\nchar c;\nchar line[1000];\n```\n\n> &emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.\n\n&emsp;&emsp;A variable may also be initialized in its declaration.\n\nIf the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:\n\n```c\nchar esc = '\\\\';\nint i = 0;\nint limit MAXLINE+1;\nfloat eps = 1.0e-5;\n```\n\n# 3 Operators and expressions\n","source":"_posts/c-programming-language.md","raw":"---\ntitle: \"C Programming Language\"\ndate: 2024-12-22 23:08:37\ncategories:\n- C\ntags:\n- C\n---\n\n# 1 Introduction to C\n\n&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. \n\n```c\n#include <stdio.h>  //include information about standard library\n\nmain()  //define a funcation named \"main\"\n{  //statements of \"main\" are enclosed in braces\n    printf(\"hello, world\\n\");\n}\n```\n\n> &emsp;&emsp;A C program begins executing at the beginning of **main**. This means that every C program must have a **main** somewhere.\n\n# 2 Types, constants and declarations\n\n## 2.1 Variable names\n\nThere are some restrictions on the names of variables and symbolic constants:\n\n* Names are made up of letters and digits; the first character must be a letter. \n* The underscore `_` counts as a letter, it is sometimes useful for **improving the readability of long variable names**. (Don't begin variable names with underscore, however, since library routines often use such names. )\n* **Upper case and lower case letters are distinct**, so \"x\" and \"X\" are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)\n\n## 2.2 Data types and sizes\n\nThere are only a few basic data types in C:\n\n| type    | description                                                                          |\n|:-------:|:------------------------------------------------------------------------------------:|\n| `char`  | **A single byte**, capable of holding one character in the local character set.      |\n| `int`   | An integer, *typically reflecting the natural size of integers on the host machine*. |\n| `float` | Single-precision floating point.                                                     |\n| `double`| Double-precision floating point.                                                     |\n\n&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. \n\n`short` and `long` apply to integers:\n\n```c\nshort int sh;\nlong int counter;\n```\n\n&emsp;&emsp;The word \"int\" can be omitted in such declarations, and typically is.\n\n```c\nshort sh;\nlong counter;\n```\n\n> &emsp;&emsp;The intent is that `short` and `long` should provide different lengths of integers where practical; `int` will normally be the natural size for a particular machine.\n\nOn a 32-bit machine, `short` is often 16 bits, `long` 32 bits, and `int` either 16 or 32 bits.\n\nOn a 64-bit machine, `short` is 16 bits, `long` 64 bits, and `int` 32 bits.\n\n...\n\n> &emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that *`short`s and `int`s are at least 16 bits, `long`s are at least 32 bits, and `short` is no longer than `int`, which is no longer than `long`*.\n\n## 2.3 Constants\n\n&emsp;&emsp;An integer constant like `1234` is an `int`. A `long` constant is written with a terminal `l` or `L`, as in `123456789L`; an integer too big to fit into an `int` will also be taken as a `long`. The `unsigned int` constants are written with a terminal `u` or `U`, and the suffix `ul` or `UL` indicates `unsigned long`.\n\n```c\nint a = 1234;\nunsigned int ua = 1234u;\n\nlong b = 1234567890L;\nunsigned long ub = 1234567890UL;\n```\n\nThe value of an integer *can be specified in octal or hexadecimal instead of decimal*: A leading `0` on an integer constant means **octal**; a leading `0x` or `0X` means **hexadecimal**.  \n\n```c\nint a = 037;  // 31 in octal\nint b = 0x1F;  // 31 in hexadecimal\n\nprintf(\"a(037) = %d\\n\", a);  // a(037) = 31\nprintf(\"b(0x1F) = %d\\n\", b);  // b(0x1F) = 31\n```\n\n&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is `double`, unless suffixed. The suffixes `f` or `F` indicate a `float` constant; `l` or `L` indicate a `long double`.\n\n```c\ndouble d = 12.34;\nfloat f = 12.34f;\nlong double ld = 12.34L;\n```\n\n&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as `'x'`. The value of a character constant is the numeric value of the character in the machine's character set.\n\n```c\nchar c = 'x';\n```\n\n> &emsp;&emsp;For example, in the ASCII character set the character constant `'0'` has the value `48`, which is unrelated to the numeric value `0`. If we write `'0'` instead of a numeric value like `48` that depends on character set, *the program is independent of the particular value and easier to read*.\n\n```c\nchar c = '0';\nint ci = c;  //ci = 48 \n```\n\n## 2.4 Declarations\n\n&emsp;&emsp;*All variables must be declared before use*, although certain declarations can be made implicitly by context.\n\nA declaration specifies a type, and contains a list of one or more variables of that type, as in:\n\n```c\nint lower, upper, step;\nchar c, line[100];\n```\n\nVariables can be distributed among declarations in any fashion; the lists above could equally well be written as:\n\n```c\nint lower;\nint upper;\nint step;\nchar c;\nchar line[1000];\n```\n\n> &emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.\n\n&emsp;&emsp;A variable may also be initialized in its declaration.\n\nIf the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:\n\n```c\nchar esc = '\\\\';\nint i = 0;\nint limit MAXLINE+1;\nfloat eps = 1.0e-5;\n```\n\n# 3 Operators and expressions\n","slug":"c-programming-language","published":1,"updated":"2025-02-14T15:35:11.079Z","comments":1,"layout":"post","photos":[],"_id":"cm74xk2qd0000kwij97jjg3ri","content":"<h1 id=\"1-Introduction-to-C\"><a href=\"#1-Introduction-to-C\" class=\"headerlink\" title=\"1 Introduction to C\"></a>1 Introduction to C</h1><p>&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. </p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;  //include information about standard library\n\nmain()  //define a funcation named &quot;main&quot;\n&#123;  //statements of &quot;main&quot; are enclosed in braces\n    printf(&quot;hello, world\\n&quot;);\n&#125;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;A C program begins executing at the beginning of <strong>main</strong>. This means that every C program must have a <strong>main</strong> somewhere.</p>\n</blockquote>\n<h1 id=\"2-Types-constants-and-declarations\"><a href=\"#2-Types-constants-and-declarations\" class=\"headerlink\" title=\"2 Types, constants and declarations\"></a>2 Types, constants and declarations</h1><h2 id=\"2-1-Variable-names\"><a href=\"#2-1-Variable-names\" class=\"headerlink\" title=\"2.1 Variable names\"></a>2.1 Variable names</h2><p>There are some restrictions on the names of variables and symbolic constants:</p>\n<ul>\n<li>Names are made up of letters and digits; the first character must be a letter. </li>\n<li>The underscore <code>_</code> counts as a letter, it is sometimes useful for <strong>improving the readability of long variable names</strong>. (Don’t begin variable names with underscore, however, since library routines often use such names. )</li>\n<li><strong>Upper case and lower case letters are distinct</strong>, so “x” and “X” are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)</li>\n</ul>\n<h2 id=\"2-2-Data-types-and-sizes\"><a href=\"#2-2-Data-types-and-sizes\" class=\"headerlink\" title=\"2.2 Data types and sizes\"></a>2.2 Data types and sizes</h2><p>There are only a few basic data types in C:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">type</th>\n<th align=\"center\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>char</code></td>\n<td align=\"center\"><strong>A single byte</strong>, capable of holding one character in the local character set.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>int</code></td>\n<td align=\"center\">An integer, <em>typically reflecting the natural size of integers on the host machine</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>float</code></td>\n<td align=\"center\">Single-precision floating point.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>double</code></td>\n<td align=\"center\">Double-precision floating point.</td>\n</tr>\n</tbody></table>\n<p>&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. </p>\n<p><code>short</code> and <code>long</code> apply to integers:</p>\n<pre><code class=\"c\">short int sh;\nlong int counter;\n</code></pre>\n<p>&emsp;&emsp;The word “int” can be omitted in such declarations, and typically is.</p>\n<pre><code class=\"c\">short sh;\nlong counter;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;The intent is that <code>short</code> and <code>long</code> should provide different lengths of integers where practical; <code>int</code> will normally be the natural size for a particular machine.</p>\n</blockquote>\n<p>On a 32-bit machine, <code>short</code> is often 16 bits, <code>long</code> 32 bits, and <code>int</code> either 16 or 32 bits.</p>\n<p>On a 64-bit machine, <code>short</code> is 16 bits, <code>long</code> 64 bits, and <code>int</code> 32 bits.</p>\n<p>…</p>\n<blockquote>\n<p>&emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that <em><code>short</code>s and <code>int</code>s are at least 16 bits, <code>long</code>s are at least 32 bits, and <code>short</code> is no longer than <code>int</code>, which is no longer than <code>long</code></em>.</p>\n</blockquote>\n<h2 id=\"2-3-Constants\"><a href=\"#2-3-Constants\" class=\"headerlink\" title=\"2.3 Constants\"></a>2.3 Constants</h2><p>&emsp;&emsp;An integer constant like <code>1234</code> is an <code>int</code>. A <code>long</code> constant is written with a terminal <code>l</code> or <code>L</code>, as in <code>123456789L</code>; an integer too big to fit into an <code>int</code> will also be taken as a <code>long</code>. The <code>unsigned int</code> constants are written with a terminal <code>u</code> or <code>U</code>, and the suffix <code>ul</code> or <code>UL</code> indicates <code>unsigned long</code>.</p>\n<pre><code class=\"c\">int a = 1234;\nunsigned int ua = 1234u;\n\nlong b = 1234567890L;\nunsigned long ub = 1234567890UL;\n</code></pre>\n<p>The value of an integer <em>can be specified in octal or hexadecimal instead of decimal</em>: A leading <code>0</code> on an integer constant means <strong>octal</strong>; a leading <code>0x</code> or <code>0X</code> means <strong>hexadecimal</strong>.  </p>\n<pre><code class=\"c\">int a = 037;  // 31 in octal\nint b = 0x1F;  // 31 in hexadecimal\n\nprintf(&quot;a(037) = %d\\n&quot;, a);  // a(037) = 31\nprintf(&quot;b(0x1F) = %d\\n&quot;, b);  // b(0x1F) = 31\n</code></pre>\n<p>&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is <code>double</code>, unless suffixed. The suffixes <code>f</code> or <code>F</code> indicate a <code>float</code> constant; <code>l</code> or <code>L</code> indicate a <code>long double</code>.</p>\n<pre><code class=\"c\">double d = 12.34;\nfloat f = 12.34f;\nlong double ld = 12.34L;\n</code></pre>\n<p>&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as <code>&#39;x&#39;</code>. The value of a character constant is the numeric value of the character in the machine’s character set.</p>\n<pre><code class=\"c\">char c = &#39;x&#39;;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;For example, in the ASCII character set the character constant <code>&#39;0&#39;</code> has the value <code>48</code>, which is unrelated to the numeric value <code>0</code>. If we write <code>&#39;0&#39;</code> instead of a numeric value like <code>48</code> that depends on character set, <em>the program is independent of the particular value and easier to read</em>.</p>\n</blockquote>\n<pre><code class=\"c\">char c = &#39;0&#39;;\nint ci = c;  //ci = 48 \n</code></pre>\n<h2 id=\"2-4-Declarations\"><a href=\"#2-4-Declarations\" class=\"headerlink\" title=\"2.4 Declarations\"></a>2.4 Declarations</h2><p>&emsp;&emsp;<em>All variables must be declared before use</em>, although certain declarations can be made implicitly by context.</p>\n<p>A declaration specifies a type, and contains a list of one or more variables of that type, as in:</p>\n<pre><code class=\"c\">int lower, upper, step;\nchar c, line[100];\n</code></pre>\n<p>Variables can be distributed among declarations in any fashion; the lists above could equally well be written as:</p>\n<pre><code class=\"c\">int lower;\nint upper;\nint step;\nchar c;\nchar line[1000];\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.</p>\n</blockquote>\n<p>&emsp;&emsp;A variable may also be initialized in its declaration.</p>\n<p>If the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:</p>\n<pre><code class=\"c\">char esc = &#39;\\\\&#39;;\nint i = 0;\nint limit MAXLINE+1;\nfloat eps = 1.0e-5;\n</code></pre>\n<h1 id=\"3-Operators-and-expressions\"><a href=\"#3-Operators-and-expressions\" class=\"headerlink\" title=\"3 Operators and expressions\"></a>3 Operators and expressions</h1>","excerpt":"","more":"<h1 id=\"1-Introduction-to-C\"><a href=\"#1-Introduction-to-C\" class=\"headerlink\" title=\"1 Introduction to C\"></a>1 Introduction to C</h1><p>&emsp;&emsp;C is a general-purpose programming language. It has been closely associated with the UNIX system where it was developed, since both the system and most of the programs that run on it are written in C. </p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;  //include information about standard library\n\nmain()  //define a funcation named &quot;main&quot;\n&#123;  //statements of &quot;main&quot; are enclosed in braces\n    printf(&quot;hello, world\\n&quot;);\n&#125;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;A C program begins executing at the beginning of <strong>main</strong>. This means that every C program must have a <strong>main</strong> somewhere.</p>\n</blockquote>\n<h1 id=\"2-Types-constants-and-declarations\"><a href=\"#2-Types-constants-and-declarations\" class=\"headerlink\" title=\"2 Types, constants and declarations\"></a>2 Types, constants and declarations</h1><h2 id=\"2-1-Variable-names\"><a href=\"#2-1-Variable-names\" class=\"headerlink\" title=\"2.1 Variable names\"></a>2.1 Variable names</h2><p>There are some restrictions on the names of variables and symbolic constants:</p>\n<ul>\n<li>Names are made up of letters and digits; the first character must be a letter. </li>\n<li>The underscore <code>_</code> counts as a letter, it is sometimes useful for <strong>improving the readability of long variable names</strong>. (Don’t begin variable names with underscore, however, since library routines often use such names. )</li>\n<li><strong>Upper case and lower case letters are distinct</strong>, so “x” and “X” are two different names. (Traditional C practice is to use lower case for variable names, and all upper case for symbolic constants.)</li>\n</ul>\n<h2 id=\"2-2-Data-types-and-sizes\"><a href=\"#2-2-Data-types-and-sizes\" class=\"headerlink\" title=\"2.2 Data types and sizes\"></a>2.2 Data types and sizes</h2><p>There are only a few basic data types in C:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">type</th>\n<th align=\"center\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>char</code></td>\n<td align=\"center\"><strong>A single byte</strong>, capable of holding one character in the local character set.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>int</code></td>\n<td align=\"center\">An integer, <em>typically reflecting the natural size of integers on the host machine</em>.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>float</code></td>\n<td align=\"center\">Single-precision floating point.</td>\n</tr>\n<tr>\n<td align=\"center\"><code>double</code></td>\n<td align=\"center\">Double-precision floating point.</td>\n</tr>\n</tbody></table>\n<p>&emsp;&emsp;In addition, there are a number of qualifiers that can be applied to these basic types. </p>\n<p><code>short</code> and <code>long</code> apply to integers:</p>\n<pre><code class=\"c\">short int sh;\nlong int counter;\n</code></pre>\n<p>&emsp;&emsp;The word “int” can be omitted in such declarations, and typically is.</p>\n<pre><code class=\"c\">short sh;\nlong counter;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;The intent is that <code>short</code> and <code>long</code> should provide different lengths of integers where practical; <code>int</code> will normally be the natural size for a particular machine.</p>\n</blockquote>\n<p>On a 32-bit machine, <code>short</code> is often 16 bits, <code>long</code> 32 bits, and <code>int</code> either 16 or 32 bits.</p>\n<p>On a 64-bit machine, <code>short</code> is 16 bits, <code>long</code> 64 bits, and <code>int</code> 32 bits.</p>\n<p>…</p>\n<blockquote>\n<p>&emsp;&emsp;Each compiler is free to choose appropriate sizes for its own hardware, subject only to the restriction that <em><code>short</code>s and <code>int</code>s are at least 16 bits, <code>long</code>s are at least 32 bits, and <code>short</code> is no longer than <code>int</code>, which is no longer than <code>long</code></em>.</p>\n</blockquote>\n<h2 id=\"2-3-Constants\"><a href=\"#2-3-Constants\" class=\"headerlink\" title=\"2.3 Constants\"></a>2.3 Constants</h2><p>&emsp;&emsp;An integer constant like <code>1234</code> is an <code>int</code>. A <code>long</code> constant is written with a terminal <code>l</code> or <code>L</code>, as in <code>123456789L</code>; an integer too big to fit into an <code>int</code> will also be taken as a <code>long</code>. The <code>unsigned int</code> constants are written with a terminal <code>u</code> or <code>U</code>, and the suffix <code>ul</code> or <code>UL</code> indicates <code>unsigned long</code>.</p>\n<pre><code class=\"c\">int a = 1234;\nunsigned int ua = 1234u;\n\nlong b = 1234567890L;\nunsigned long ub = 1234567890UL;\n</code></pre>\n<p>The value of an integer <em>can be specified in octal or hexadecimal instead of decimal</em>: A leading <code>0</code> on an integer constant means <strong>octal</strong>; a leading <code>0x</code> or <code>0X</code> means <strong>hexadecimal</strong>.  </p>\n<pre><code class=\"c\">int a = 037;  // 31 in octal\nint b = 0x1F;  // 31 in hexadecimal\n\nprintf(&quot;a(037) = %d\\n&quot;, a);  // a(037) = 31\nprintf(&quot;b(0x1F) = %d\\n&quot;, b);  // b(0x1F) = 31\n</code></pre>\n<p>&emsp;&emsp;Floating-point constants contain a decimal point (123.4) or an exponent (1e-2) or both; their type is <code>double</code>, unless suffixed. The suffixes <code>f</code> or <code>F</code> indicate a <code>float</code> constant; <code>l</code> or <code>L</code> indicate a <code>long double</code>.</p>\n<pre><code class=\"c\">double d = 12.34;\nfloat f = 12.34f;\nlong double ld = 12.34L;\n</code></pre>\n<p>&emsp;&emsp;A character constant is an integer, written as one character within single quotes, such as <code>&#39;x&#39;</code>. The value of a character constant is the numeric value of the character in the machine’s character set.</p>\n<pre><code class=\"c\">char c = &#39;x&#39;;\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;For example, in the ASCII character set the character constant <code>&#39;0&#39;</code> has the value <code>48</code>, which is unrelated to the numeric value <code>0</code>. If we write <code>&#39;0&#39;</code> instead of a numeric value like <code>48</code> that depends on character set, <em>the program is independent of the particular value and easier to read</em>.</p>\n</blockquote>\n<pre><code class=\"c\">char c = &#39;0&#39;;\nint ci = c;  //ci = 48 \n</code></pre>\n<h2 id=\"2-4-Declarations\"><a href=\"#2-4-Declarations\" class=\"headerlink\" title=\"2.4 Declarations\"></a>2.4 Declarations</h2><p>&emsp;&emsp;<em>All variables must be declared before use</em>, although certain declarations can be made implicitly by context.</p>\n<p>A declaration specifies a type, and contains a list of one or more variables of that type, as in:</p>\n<pre><code class=\"c\">int lower, upper, step;\nchar c, line[100];\n</code></pre>\n<p>Variables can be distributed among declarations in any fashion; the lists above could equally well be written as:</p>\n<pre><code class=\"c\">int lower;\nint upper;\nint step;\nchar c;\nchar line[1000];\n</code></pre>\n<blockquote>\n<p>&emsp;&emsp;This latter form takes more spaces, but is convenient for adding a comment to each declaration for subsequent modifications.</p>\n</blockquote>\n<p>&emsp;&emsp;A variable may also be initialized in its declaration.</p>\n<p>If the name is followed by an equals sign and an expression, the expression serves as an initializer, as in:</p>\n<pre><code class=\"c\">char esc = &#39;\\\\&#39;;\nint i = 0;\nint limit MAXLINE+1;\nfloat eps = 1.0e-5;\n</code></pre>\n<h1 id=\"3-Operators-and-expressions\"><a href=\"#3-Operators-and-expressions\" class=\"headerlink\" title=\"3 Operators and expressions\"></a>3 Operators and expressions</h1>"},{"title":"Standard Library","date":"2025-01-23T09:30:35.000Z","_content":"","source":"_posts/c-standard-library.md","raw":"---\ntitle: Standard Library\ndate: 2025-01-23 17:30:35\ncategories:\n- C\ntags:\n---\n","slug":"c-standard-library","published":1,"updated":"2025-02-14T15:35:11.079Z","comments":1,"layout":"post","photos":[],"_id":"cm74xk2qr0003kwijhvjt2duy","content":"","excerpt":"","more":""},{"title":"Unix System Interface","date":"2025-01-21T06:38:42.000Z","_content":"","source":"_posts/c-unix-system-interface.md","raw":"---\ntitle: Unix System Interface\ndate: 2025-01-21 14:38:42\ncategories:\n- C\ntags:\n---\n","slug":"c-unix-system-interface","published":1,"updated":"2025-02-14T15:35:11.079Z","comments":1,"layout":"post","photos":[],"_id":"cm74xk2qt0004kwij0hkw6y3g","content":"","excerpt":"","more":""},{"title":"C++ Programming Language","date":"2025-01-13T15:58:37.000Z","_content":"\n<a href=\"https://www.geeksforgeeks.org/c-plus-plus/?ref=lbp\" target=\"_blank\">knowledge page</a>\n","source":"_posts/cpp-programming-language.md","raw":"---\ntitle: C++ Programming Language\ndate: 2025-01-13 23:58:37\ncategories:\n- Cpp\ntags:\n---\n\n<a href=\"https://www.geeksforgeeks.org/c-plus-plus/?ref=lbp\" target=\"_blank\">knowledge page</a>\n","slug":"cpp-programming-language","published":1,"updated":"2025-02-14T15:35:11.080Z","comments":1,"layout":"post","photos":[],"_id":"cm74xk2qv0005kwijbbpv6j6e","content":"<p><a href=\"https://www.geeksforgeeks.org/c-plus-plus/?ref=lbp\" target=\"_blank\">knowledge page</a></p>\n","excerpt":"","more":"<p><a href=\"https://www.geeksforgeeks.org/c-plus-plus/?ref=lbp\" target=\"_blank\">knowledge page</a></p>\n"},{"title":"java-jeecg","date":"2025-02-13T13:36:29.000Z","_content":"\n# JEECG\n\n\n\n\n","source":"_posts/java-jeecg.md","raw":"---\ntitle: java-jeecg\ndate: 2025-02-13 21:36:29\ncategories:\n- Java\ntags:\n---\n\n# JEECG\n\n\n\n\n","slug":"java-jeecg","published":1,"updated":"2025-02-14T15:35:11.080Z","comments":1,"layout":"post","photos":[],"_id":"cm74xk2qz0007kwij3s5e7usd","content":"<h1 id=\"JEECG\"><a href=\"#JEECG\" class=\"headerlink\" title=\"JEECG\"></a>JEECG</h1>","excerpt":"","more":"<h1 id=\"JEECG\"><a href=\"#JEECG\" class=\"headerlink\" title=\"JEECG\"></a>JEECG</h1>"},{"title":"Java Programming Language","date":"2024-12-30T06:16:47.000Z","_content":"\n# 1 About Java\n\n&emsp;&emsp;Java is a high-level, object-oriented programming language introduced by SUN (Stanford University Network) in 1995. It not only incorporates the strengths of C++ but also eliminates complex concepts like multiple inheritance and pointers found in C++, making Java both powerful and user-friendly. As a leading example of static object-oriented programming languages, Java excels in implementing object-oriented principles, enabling programmers to tackle complex programming tasks with an elegant approach.\n\n&emsp;&emsp;With the continuous maturation of Java technology in web development, Java has become the preferred development language for web applications.\n\n# 2 Variables and Data Types\n\n## 2.1 Variables\n\n### 2.1.1 Variables in Java\n\n&emsp;&emsp;A variable is a storage area in memory where the data can continuously change within the same type range. It serves as the most fundamental storage unit in a program, consisting of three components: variable type, variable name, and stored value.\n\n&emsp;&emsp;Java defines explicit data types for each kind of data and allocates memory space of varying sizes in memory accordingly. (Java is categorized as a strongly-typed programming language.)\n\n> Variables are used to store data generated during the execution of a program in memory. (We use the variable name to access the data in this memory area.)\n","source":"_posts/java-programming-language.md","raw":"---\ntitle: \"Java Programming Language\"\ndate: 2024-12-30 14:16:47\ncategories:\n- Java\ntags: \n- Java\n---\n\n# 1 About Java\n\n&emsp;&emsp;Java is a high-level, object-oriented programming language introduced by SUN (Stanford University Network) in 1995. It not only incorporates the strengths of C++ but also eliminates complex concepts like multiple inheritance and pointers found in C++, making Java both powerful and user-friendly. As a leading example of static object-oriented programming languages, Java excels in implementing object-oriented principles, enabling programmers to tackle complex programming tasks with an elegant approach.\n\n&emsp;&emsp;With the continuous maturation of Java technology in web development, Java has become the preferred development language for web applications.\n\n# 2 Variables and Data Types\n\n## 2.1 Variables\n\n### 2.1.1 Variables in Java\n\n&emsp;&emsp;A variable is a storage area in memory where the data can continuously change within the same type range. It serves as the most fundamental storage unit in a program, consisting of three components: variable type, variable name, and stored value.\n\n&emsp;&emsp;Java defines explicit data types for each kind of data and allocates memory space of varying sizes in memory accordingly. (Java is categorized as a strongly-typed programming language.)\n\n> Variables are used to store data generated during the execution of a program in memory. (We use the variable name to access the data in this memory area.)\n","slug":"java-programming-language","published":1,"updated":"2025-02-14T15:35:11.080Z","comments":1,"layout":"post","photos":[],"_id":"cm74xk2r0000akwij33g0h1zl","content":"<h1 id=\"1-About-Java\"><a href=\"#1-About-Java\" class=\"headerlink\" title=\"1 About Java\"></a>1 About Java</h1><p>&emsp;&emsp;Java is a high-level, object-oriented programming language introduced by SUN (Stanford University Network) in 1995. It not only incorporates the strengths of C++ but also eliminates complex concepts like multiple inheritance and pointers found in C++, making Java both powerful and user-friendly. As a leading example of static object-oriented programming languages, Java excels in implementing object-oriented principles, enabling programmers to tackle complex programming tasks with an elegant approach.</p>\n<p>&emsp;&emsp;With the continuous maturation of Java technology in web development, Java has become the preferred development language for web applications.</p>\n<h1 id=\"2-Variables-and-Data-Types\"><a href=\"#2-Variables-and-Data-Types\" class=\"headerlink\" title=\"2 Variables and Data Types\"></a>2 Variables and Data Types</h1><h2 id=\"2-1-Variables\"><a href=\"#2-1-Variables\" class=\"headerlink\" title=\"2.1 Variables\"></a>2.1 Variables</h2><h3 id=\"2-1-1-Variables-in-Java\"><a href=\"#2-1-1-Variables-in-Java\" class=\"headerlink\" title=\"2.1.1 Variables in Java\"></a>2.1.1 Variables in Java</h3><p>&emsp;&emsp;A variable is a storage area in memory where the data can continuously change within the same type range. It serves as the most fundamental storage unit in a program, consisting of three components: variable type, variable name, and stored value.</p>\n<p>&emsp;&emsp;Java defines explicit data types for each kind of data and allocates memory space of varying sizes in memory accordingly. (Java is categorized as a strongly-typed programming language.)</p>\n<blockquote>\n<p>Variables are used to store data generated during the execution of a program in memory. (We use the variable name to access the data in this memory area.)</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"1-About-Java\"><a href=\"#1-About-Java\" class=\"headerlink\" title=\"1 About Java\"></a>1 About Java</h1><p>&emsp;&emsp;Java is a high-level, object-oriented programming language introduced by SUN (Stanford University Network) in 1995. It not only incorporates the strengths of C++ but also eliminates complex concepts like multiple inheritance and pointers found in C++, making Java both powerful and user-friendly. As a leading example of static object-oriented programming languages, Java excels in implementing object-oriented principles, enabling programmers to tackle complex programming tasks with an elegant approach.</p>\n<p>&emsp;&emsp;With the continuous maturation of Java technology in web development, Java has become the preferred development language for web applications.</p>\n<h1 id=\"2-Variables-and-Data-Types\"><a href=\"#2-Variables-and-Data-Types\" class=\"headerlink\" title=\"2 Variables and Data Types\"></a>2 Variables and Data Types</h1><h2 id=\"2-1-Variables\"><a href=\"#2-1-Variables\" class=\"headerlink\" title=\"2.1 Variables\"></a>2.1 Variables</h2><h3 id=\"2-1-1-Variables-in-Java\"><a href=\"#2-1-1-Variables-in-Java\" class=\"headerlink\" title=\"2.1.1 Variables in Java\"></a>2.1.1 Variables in Java</h3><p>&emsp;&emsp;A variable is a storage area in memory where the data can continuously change within the same type range. It serves as the most fundamental storage unit in a program, consisting of three components: variable type, variable name, and stored value.</p>\n<p>&emsp;&emsp;Java defines explicit data types for each kind of data and allocates memory space of varying sizes in memory accordingly. (Java is categorized as a strongly-typed programming language.)</p>\n<blockquote>\n<p>Variables are used to store data generated during the execution of a program in memory. (We use the variable name to access the data in this memory area.)</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm626nnh60005osij2kbmf3d6","category_id":"cm626nnhd000gosij92hdcux5","_id":"cm626nnhf000losij6y2vc1d0"},{"post_id":"cm626nnh70006osijhsoc4ron","category_id":"cm626nnhd000gosij92hdcux5","_id":"cm626nnhf000mosija20p2gx0"},{"post_id":"cm626nnh90009osij2lw47ohb","category_id":"cm626nnhf000kosij1fipa7lu","_id":"cm626nnhg000posijdvms15ty"},{"post_id":"cm626nnha000aosijfz8wcrff","category_id":"cm626nnhf000kosij1fipa7lu","_id":"cm626nnhh000rosijb2fq0cle"},{"post_id":"cm626nnhc000eosij82bhbqpu","category_id":"cm626nnhg000qosijbmhyderq","_id":"cm626nnhh000uosij4bke3dn4"},{"post_id":"cm626nnhd000hosij8mjh78sw","category_id":"cm626nnhg000qosijbmhyderq","_id":"cm626nnhi000vosij6m4yhqt6"},{"post_id":"cm74xk2qt0004kwij0hkw6y3g","category_id":"cm74xk2qm0001kwijfopd1251","_id":"cm74xk2qz0008kwijbub0gfv7"},{"post_id":"cm74xk2qd0000kwij97jjg3ri","category_id":"cm74xk2qm0001kwijfopd1251","_id":"cm74xk2r1000bkwij3oyq3ne7"},{"post_id":"cm626nngv0000osij9lpebu1a","category_id":"cm74xk2qm0001kwijfopd1251","_id":"cm74xk2r3000dkwij5xpoavnl"},{"post_id":"cm74xk2qz0007kwij3s5e7usd","category_id":"cm626nnhf000kosij1fipa7lu","_id":"cm74xk2r4000fkwijaq50bmgo"},{"post_id":"cm74xk2r0000akwij33g0h1zl","category_id":"cm626nnhf000kosij1fipa7lu","_id":"cm74xk2r5000hkwij3jvrfboq"},{"post_id":"cm74xk2qr0003kwijhvjt2duy","category_id":"cm74xk2qm0001kwijfopd1251","_id":"cm74xk2r5000jkwijdrcs0ux2"},{"post_id":"cm74xk2qv0005kwijbbpv6j6e","category_id":"cm74xk2r2000ckwijh6nlbkfh","_id":"cm74xk2r5000kkwij21ib8pj9"},{"post_id":"cm64pi98z0000bn3scr2s6my9","category_id":"cm74xk2r4000gkwij026g88mn","_id":"cm74xk2r5000lkwijgyawagbm"}],"PostTag":[{"post_id":"cm626nngv0000osij9lpebu1a","tag_id":"cm626nnh50003osijhbb31rl2","_id":"cm626nnh90008osijbh37h0co"},{"post_id":"cm74xk2qd0000kwij97jjg3ri","tag_id":"cm626nnh50003osijhbb31rl2","_id":"cm74xk2qq0002kwijdxavgjsg"},{"post_id":"cm74xk2r0000akwij33g0h1zl","tag_id":"cm74xk2r3000ekwij6tk4csn4","_id":"cm74xk2r5000ikwij401gf3pj"}],"Tag":[{"name":"C","_id":"cm626nnh50003osijhbb31rl2"},{"name":"Java","_id":"cm74xk2r3000ekwij6tk4csn4"}]}}